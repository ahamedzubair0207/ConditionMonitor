/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, TemplateRef, ViewContainerRef, ChangeDetectorRef, Inject, NgZone } from '@angular/core';
import { takeUntil, flatMap, startWith, delay, tap, distinctUntilChanged } from 'rxjs/operators';
import { Subject, combineLatest, interval } from 'rxjs';
import { FloFullscreenService } from '../common/ng-fullscreen.service';
import { isIphone } from '../common/util';
import { FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED } from '../common/ng-fullscreen.tokens';
// tslint:disable: readonly-keyword
/**
 * @abstract
 */
var FloFullscreenDirective = /** @class */ (function () {
    function FloFullscreenDirective(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) {
        var _this = this;
        this.tr = tr;
        this.vc = vc;
        this.fs = fs;
        this.cd = cd;
        this.iosPollEnabled = iosPollEnabled;
        this.iosPollrate = iosPollrate;
        this.zone = zone;
        this.elmSource = new Subject();
        this.showWhenFullscreen = false;
        this.ngOnDestroy$ = new Subject();
        this.elm = (/**
         * @return {?}
         */
        function () { return _this.elmInputKey ? (/** @type {?} */ (_this[_this.elmInputKey])) : undefined; });
        this.elm$ = this.elmSource.asObservable();
    }
    /**
     * @return {?}
     */
    FloFullscreenDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        combineLatest(this.fs.fullscreen$, this.elm$.pipe(tap((/**
         * @return {?}
         */
        function () { return _this.cd.detectChanges(); })), startWith(this.elm()), delay(0), flatMap((/**
         * @param {?} elm
         * @return {?}
         */
        function (elm) { return _this.iosPollEnabled && isIphone()
            ? _this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                return interval(_this.iosPollrate).pipe(flatMap((/**
                 * @return {?}
                 */
                function () { return _this.fs.fullscreenIsSupported(elm); })), distinctUntilChanged(), takeUntil(_this.ngOnDestroy$));
            }))
            : _this.fs.fullscreenIsSupported(elm); })), takeUntil(this.ngOnDestroy$))).pipe(takeUntil(this.ngOnDestroy$)).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var isFullscreen = res[0];
            /** @type {?} */
            var isSupported = res[1];
            _this.vc.clear();
            if (_this.showWhenFullscreen) { // exit
                if (isFullscreen) {
                    _this.vc.createEmbeddedView(_this.tr);
                }
            }
            else if (!isFullscreen) { // enter
                if (isSupported) {
                    _this.vc.createEmbeddedView(_this.tr);
                }
            }
            _this.cd.detectChanges();
        }));
    };
    /**
     * @param {?} sc
     * @return {?}
     */
    FloFullscreenDirective.prototype.ngOnChanges = /**
     * @param {?} sc
     * @return {?}
     */
    function (sc) {
        if (this.elmInputKey && sc[this.elmInputKey]) {
            this.elmSource.next(sc[this.elmInputKey].currentValue);
        }
    };
    /**
     * @return {?}
     */
    FloFullscreenDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy$.next();
        this.ngOnDestroy$.complete();
    };
    /** @nocollapse */
    FloFullscreenDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: FloFullscreenService },
        { type: ChangeDetectorRef },
        { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] },
        { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
        { type: NgZone }
    ]; };
    return FloFullscreenDirective;
}());
export { FloFullscreenDirective };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.elmInputKey;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenDirective.prototype.elmSource;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.showWhenFullscreen;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.ngOnDestroy$;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.elm;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.elm$;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.tr;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.vc;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.fs;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.cd;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.iosPollEnabled;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.iosPollrate;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.zone;
}
/** @type {?} */
var IF_FS_SELECTOR = 'floIfFullscreen';
var FloFullscreenOnDirective = /** @class */ (function (_super) {
    tslib_1.__extends(FloFullscreenOnDirective, _super);
    function FloFullscreenOnDirective(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) {
        var _this = _super.call(this, tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) || this;
        _this.tr = tr;
        _this.vc = vc;
        _this.fs = fs;
        _this.cd = cd;
        _this.iosPollEnabled = iosPollEnabled;
        _this.iosPollrate = iosPollrate;
        _this.zone = zone;
        _this.elmInputKey = IF_FS_SELECTOR;
        _this.showWhenFullscreen = true;
        return _this;
    }
    FloFullscreenOnDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[" + IF_FS_SELECTOR + "]",
                    inputs: [IF_FS_SELECTOR]
                },] }
    ];
    /** @nocollapse */
    FloFullscreenOnDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: FloFullscreenService },
        { type: ChangeDetectorRef },
        { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] },
        { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
        { type: NgZone }
    ]; };
    return FloFullscreenOnDirective;
}(FloFullscreenDirective));
export { FloFullscreenOnDirective };
if (false) {
    /** @type {?} */
    FloFullscreenOnDirective.prototype.elmInputKey;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.tr;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.vc;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.fs;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.cd;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.iosPollEnabled;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.iosPollrate;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.zone;
}
/** @type {?} */
var IF_NOT_FS_SELECTOR = 'floIfNotFullscreen';
var FloFullscreenOffDirective = /** @class */ (function (_super) {
    tslib_1.__extends(FloFullscreenOffDirective, _super);
    function FloFullscreenOffDirective(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) {
        var _this = _super.call(this, tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) || this;
        _this.tr = tr;
        _this.vc = vc;
        _this.fs = fs;
        _this.cd = cd;
        _this.iosPollEnabled = iosPollEnabled;
        _this.iosPollrate = iosPollrate;
        _this.zone = zone;
        _this.elmInputKey = IF_NOT_FS_SELECTOR;
        _this.showWhenFullscreen = false;
        return _this;
    }
    FloFullscreenOffDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[" + IF_NOT_FS_SELECTOR + "]",
                    inputs: [IF_NOT_FS_SELECTOR]
                },] }
    ];
    /** @nocollapse */
    FloFullscreenOffDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: FloFullscreenService },
        { type: ChangeDetectorRef },
        { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] },
        { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
        { type: NgZone }
    ]; };
    return FloFullscreenOffDirective;
}(FloFullscreenDirective));
export { FloFullscreenOffDirective };
if (false) {
    /** @type {?} */
    FloFullscreenOffDirective.prototype.elmInputKey;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.tr;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.vc;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.fs;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.cd;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.iosPollEnabled;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.iosPollrate;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,