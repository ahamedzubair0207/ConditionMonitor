/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, Inject, ChangeDetectorRef } from '@angular/core';
import { FloFullscreenService } from '../common/ng-fullscreen.service';
import { take } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
// tslint:disable: readonly-keyword
// tslint:disable: no-object-mutation
var FloClickToEnterFullscreenDirective = /** @class */ (function () {
    function FloClickToEnterFullscreenDirective(fs, doc, cd) {
        this.fs = fs;
        this.doc = doc;
        this.cd = cd;
    }
    Object.defineProperty(FloClickToEnterFullscreenDirective.prototype, "floClickToEnterFullscreen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._element;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof HTMLElement) {
                this._element = val;
            }
            else {
                this._element = this.doc.body;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FloClickToEnterFullscreenDirective.prototype.click = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.cd.detectChanges();
        this.fs.isNotFullscreen.pipe(take(1)).subscribe((/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
            // should check for nested video elements to make iOS dev easier
            _this.fs.goFullscreen(_this.fs.extractVideoForIphoneIfRequired(_this.floClickToEnterFullscreen));
        }));
    };
    FloClickToEnterFullscreenDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[floClickToEnterFullscreen]',
                },] }
    ];
    /** @nocollapse */
    FloClickToEnterFullscreenDirective.ctorParameters = function () { return [
        { type: FloFullscreenService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef }
    ]; };
    FloClickToEnterFullscreenDirective.propDecorators = {
        floClickToEnterFullscreen: [{ type: Input }],
        click: [{ type: HostListener, args: ['click', [],] }]
    };
    return FloClickToEnterFullscreenDirective;
}());
export { FloClickToEnterFullscreenDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype.fs;
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype.doc;
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype.cd;
}
var FloClickToExitFullscreenDirective = /** @class */ (function () {
    function FloClickToExitFullscreenDirective(fs) {
        this.fs = fs;
    }
    /**
     * @return {?}
     */
    FloClickToExitFullscreenDirective.prototype.click = /**
     * @return {?}
     */
    function () {
        this.fs.exitFullscreen();
    };
    FloClickToExitFullscreenDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[floClickToExitFullscreen]',
                },] }
    ];
    /** @nocollapse */
    FloClickToExitFullscreenDirective.ctorParameters = function () { return [
        { type: FloFullscreenService }
    ]; };
    FloClickToExitFullscreenDirective.propDecorators = {
        click: [{ type: HostListener, args: ['click', [],] }]
    };
    return FloClickToExitFullscreenDirective;
}());
export { FloClickToExitFullscreenDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FloClickToExitFullscreenDirective.prototype.fs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZnVsbHNjcmVlbi50b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZsb3Nwb3J0c2luYy9uZy1mdWxsc2NyZWVuLyIsInNvdXJjZXMiOlsic3JjL3RvZ2dsZS9uZy1mdWxsc2NyZWVuLnRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDekYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUE7QUFDdEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTs7O0FBSzFDO0lBSUUsNENBQW9CLEVBQXdCLEVBQTRCLEdBQVEsRUFBVSxFQUFxQjtRQUEzRixPQUFFLEdBQUYsRUFBRSxDQUFzQjtRQUE0QixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFBSSxDQUFDO0lBSXBILHNCQUNJLHlFQUF5Qjs7OztRQUQ3QjtZQUVFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUN0QixDQUFDOzs7OztRQUNELFVBQThCLEdBQVE7WUFDcEMsSUFBSSxHQUFHLFlBQVksV0FBVyxFQUFFO2dCQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQTthQUNwQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO2FBQzlCO1FBQ0gsQ0FBQzs7O09BUEE7Ozs7SUFTMEIsa0RBQUs7OztJQUFoQztRQUFBLGlCQU1DO1FBTEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsQ0FBQztZQUMvQyxnRUFBZ0U7WUFDaEUsS0FBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQyxLQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFBO1FBQy9GLENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQzs7Z0JBMUJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2lCQUN4Qzs7OztnQkFUUSxvQkFBb0I7Z0RBV29CLE1BQU0sU0FBQyxRQUFRO2dCQVpmLGlCQUFpQjs7OzRDQWdCL0QsS0FBSzt3QkFZTCxZQUFZLFNBQUMsT0FBTyxFQUFFLEVBQUU7O0lBTzNCLHlDQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0F4Qlksa0NBQWtDOzs7Ozs7SUFHN0Msc0RBQTRDOzs7OztJQUZoQyxnREFBZ0M7Ozs7O0lBQUUsaURBQWtDOzs7OztJQUFFLGdEQUE2Qjs7QUF5QmpIO0lBSUUsMkNBQW9CLEVBQXdCO1FBQXhCLE9BQUUsR0FBRixFQUFFLENBQXNCO0lBQUksQ0FBQzs7OztJQUV0QixpREFBSzs7O0lBQWhDO1FBQ0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtJQUMxQixDQUFDOztnQkFSRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtpQkFDdkM7Ozs7Z0JBdENRLG9CQUFvQjs7O3dCQTBDMUIsWUFBWSxTQUFDLE9BQU8sRUFBRSxFQUFFOztJQUczQix3Q0FBQztDQUFBLEFBVEQsSUFTQztTQU5ZLGlDQUFpQzs7Ozs7O0lBQ2hDLCtDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCwgSW5qZWN0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBGbG9GdWxsc2NyZWVuU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9uZy1mdWxsc2NyZWVuLnNlcnZpY2UnXG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbidcblxuLy8gdHNsaW50OmRpc2FibGU6IHJlYWRvbmx5LWtleXdvcmRcbi8vIHRzbGludDpkaXNhYmxlOiBuby1vYmplY3QtbXV0YXRpb25cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zsb0NsaWNrVG9FbnRlckZ1bGxzY3JlZW5dJyxcbn0pXG5leHBvcnQgY2xhc3MgRmxvQ2xpY2tUb0VudGVyRnVsbHNjcmVlbkRpcmVjdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnM6IEZsb0Z1bGxzY3JlZW5TZXJ2aWNlLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvYzogYW55LCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQgfCBIVE1MRG9jdW1lbnRcblxuICBASW5wdXQoKVxuICBnZXQgZmxvQ2xpY2tUb0VudGVyRnVsbHNjcmVlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFxuICB9XG4gIHNldCBmbG9DbGlja1RvRW50ZXJGdWxsc2NyZWVuKHZhbDogYW55KSB7XG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gdmFsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLmRvYy5ib2R5XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbXSkgY2xpY2soKSB7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKClcbiAgICB0aGlzLmZzLmlzTm90RnVsbHNjcmVlbi5waXBlKHRha2UoMSkpLnN1YnNjcmliZShfID0+IHtcbiAgICAgIC8vIHNob3VsZCBjaGVjayBmb3IgbmVzdGVkIHZpZGVvIGVsZW1lbnRzIHRvIG1ha2UgaU9TIGRldiBlYXNpZXJcbiAgICAgIHRoaXMuZnMuZ29GdWxsc2NyZWVuKHRoaXMuZnMuZXh0cmFjdFZpZGVvRm9ySXBob25lSWZSZXF1aXJlZCh0aGlzLmZsb0NsaWNrVG9FbnRlckZ1bGxzY3JlZW4pKVxuICAgIH0pXG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zsb0NsaWNrVG9FeGl0RnVsbHNjcmVlbl0nLFxufSlcbmV4cG9ydCBjbGFzcyBGbG9DbGlja1RvRXhpdEZ1bGxzY3JlZW5EaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZzOiBGbG9GdWxsc2NyZWVuU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbXSkgY2xpY2soKSB7XG4gICAgdGhpcy5mcy5leGl0RnVsbHNjcmVlbigpXG4gIH1cbn1cbiJdfQ==