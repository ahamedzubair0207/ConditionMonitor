/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isIphone } from './util';
import { DOCUMENT, isPlatformServer } from '@angular/common';
import { Injectable, Inject, PLATFORM_ID, NgZone } from '@angular/core';
import { merge, fromEvent, throwError, of, interval, BehaviorSubject, EMPTY } from 'rxjs';
import { debounceTime, map, startWith, shareReplay, filter, flatMap, tap, distinctUntilChanged, take, takeUntil } from 'rxjs/operators';
import { FS_FULLSCREEN_REQUEST_EVENTS, FS_FULLSCREEN_EXIT_EVENTS, FS_FULLSCREEN_ELEMENT, FS_FULLSCREEN_CHANGE_EVENTS, FS_FULLSCREEN_ELEMENT_ERROR_EVENTS, FS_FULLSCREEN_ENABLED, FS_FULLSCREEN_ENABLED_FUNC, FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED } from './ng-fullscreen.tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./ng-fullscreen.tokens";
/** @type {?} */
var isKeyTrue = (/**
 * @param {?} platformKeys
 * @return {?}
 */
function (platformKeys) { return (/**
 * @param {?} doc
 * @return {?}
 */
function (doc) {
    return platformKeys.reduce((/**
     * @param {?} acc
     * @param {?} curr
     * @return {?}
     */
    function (acc, curr) { return acc || doc[curr] ? true : false; }), false);
}); });
var ɵ0 = isKeyTrue;
/** @type {?} */
var fullscreenChangeError = (/**
 * @param {?} platformKeys
 * @return {?}
 */
function (platformKeys) { return (/**
 * @param {?} doc
 * @return {?}
 */
function (doc) {
    return merge.apply(void 0, tslib_1.__spread(platformKeys.map((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return fromEvent(doc, key); })))).pipe(debounceTime(0));
}); });
var ɵ1 = fullscreenChangeError;
/** @type {?} */
var filterAndExecute = (/**
 * @param {?} ref
 * @return {?}
 */
function (ref) { return (/**
 * @param {?} arr
 * @return {?}
 */
function (arr) {
    /** @type {?} */
    var funcStringIdx = arr.findIndex((/**
     * @param {?} a
     * @return {?}
     */
    function (a) { return typeof ref[a] === 'function'; }));
    if (funcStringIdx >= 0) {
        ref[arr[funcStringIdx]]();
    }
}); });
var ɵ2 = filterAndExecute;
/**
 * @record
 */
export function IFloFullscreenService() { }
if (false) {
    /** @type {?} */
    IFloFullscreenService.prototype.fullscreen$;
    /** @type {?} */
    IFloFullscreenService.prototype.isFullscreen$;
    /** @type {?} */
    IFloFullscreenService.prototype.isNotFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.exitFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.goFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.canGoFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.fullscreenIsSupported;
    /** @type {?} */
    IFloFullscreenService.prototype.isFullscreen;
}
var FloFullscreenService = /** @class */ (function () {
    // tslint:disable: readonly-array
    function FloFullscreenService(zone, doc, platformId, requestEventKeys, exitEventKeys, elementKeys, changeEventKeys, elementErrorEventKeys, enabledKeys, enabledFunc, iosPollrate, iosPollEnabled) {
        var _this = this;
        this.zone = zone;
        this.doc = doc;
        this.platformId = platformId;
        this.requestEventKeys = requestEventKeys;
        this.exitEventKeys = exitEventKeys;
        this.elementKeys = elementKeys;
        this.changeEventKeys = changeEventKeys;
        this.elementErrorEventKeys = elementErrorEventKeys;
        this.enabledKeys = enabledKeys;
        this.enabledFunc = enabledFunc;
        this.iosPollrate = iosPollrate;
        this.iosPollEnabled = iosPollEnabled;
        this.iOSVideoState = new BehaviorSubject(false);
        this.isFullscreen = (/**
         * @param {?=} doc
         * @return {?}
         */
        function (doc) {
            if (doc === void 0) { doc = _this.doc; }
            return isPlatformServer(_this.platformId) ? false : isKeyTrue(_this.elementKeys)(doc) || _this.iOSVideoState.getValue();
        });
        this.fullscreenError$ = fullscreenChangeError(this.elementErrorEventKeys)(this.doc).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return throwError(e); })));
        this.iosVideoBypass = (/**
         * @param {?} pasthrough
         * @return {?}
         */
        function (pasthrough) { return isIphone() ? ['webkitEnterFullscreen'] : pasthrough; });
        this.extractVideoForIphoneIfRequired = (/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return isIphone() && !(element instanceof HTMLVideoElement)
            ? element.querySelector('video') || element
            : element; });
        this.iosPoller = (/**
         * @return {?}
         */
        function () { return !_this.iosPollEnabled
            ? EMPTY
            : _this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                return interval(_this.iosPollrate).pipe(map((/**
                 * @return {?}
                 */
                function () { return Array.from(((/** @type {?} */ (_this.doc))).querySelectorAll('video')); })), flatMap((/**
                 * @param {?} videoElements
                 * @return {?}
                 */
                function (videoElements) { return merge.apply(void 0, tslib_1.__spread(videoElements.map((/**
                 * @param {?} ve
                 * @return {?}
                 */
                function (ve) { return fromEvent(ve, 'webkitbeginfullscreen').pipe(tap((/**
                 * @return {?}
                 */
                function () { return _this.iOSVideoState.next(true); })), take(1)); })), videoElements.map((/**
                 * @param {?} ve
                 * @return {?}
                 */
                function (ve) { return fromEvent(ve, 'webkitendfullscreen').pipe(tap((/**
                 * @return {?}
                 */
                function () { return _this.iOSVideoState.next(false); })), take(1)); })))); })), takeUntil(_this.iOSVideoState));
            })); });
        this.fullscreen$ = isPlatformServer(this.platformId)
            ? of(false)
            : merge.apply(void 0, tslib_1.__spread(this.changeEventKeys.map((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return fromEvent(_this.doc, key); })), [this.fullscreenError$,
                this.iosPoller()])).pipe(debounceTime(0), map((/**
             * @return {?}
             */
            function () { return _this.isFullscreen(); })), distinctUntilChanged(), startWith(this.isFullscreen()), shareReplay(1));
        this.fullscreenIsSupported = (/**
         * @param {?=} elm
         * @return {?}
         */
        function (elm) {
            return (isPlatformServer(_this.platformId)
                ? of(false)
                : isKeyTrue(_this.enabledKeys)(_this.doc)
                    ? of(true)
                    : !elm
                        ? of(false)
                        : _this.enabledFunc(elm)).pipe(shareReplay(1));
        });
        this.canGoFullscreen = (/**
         * @param {?=} elm
         * @return {?}
         */
        function (elm) {
            return (isPlatformServer(_this.platformId)
                ? of(false)
                : _this.fullscreenIsSupported(elm)
                    .pipe(flatMap((/**
                 * @param {?} isSupported
                 * @return {?}
                 */
                function (isSupported) { return !isSupported
                    ? of(false)
                    : _this.fullscreen$.pipe(map((/**
                     * @param {?} isfs
                     * @return {?}
                     */
                    function (isfs) { return isfs ? false : true; }))); })))).pipe(shareReplay(1));
        });
        this.isFullscreen$ = this.fullscreen$.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v === true; })));
        this.isNotFullscreen = this.fullscreen$.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v === false; })));
        this.exitFullscreen = (/**
         * @return {?}
         */
        function () { return filterAndExecute(_this.doc)(_this.exitEventKeys); });
        this.goFullscreen = (/**
         * @param {?=} elm
         * @return {?}
         */
        function (elm) {
            if (elm === void 0) { elm = _this.doc.body; }
            return filterAndExecute(elm)(_this.iosVideoBypass(_this.requestEventKeys));
        });
    }
    FloFullscreenService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    FloFullscreenService.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_REQUEST_EVENTS,] }] },
        { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_EXIT_EVENTS,] }] },
        { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ELEMENT,] }] },
        { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_CHANGE_EVENTS,] }] },
        { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ELEMENT_ERROR_EVENTS,] }] },
        { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ENABLED,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ENABLED_FUNC,] }] },
        { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] }
    ]; };
    /** @nocollapse */ FloFullscreenService.ngInjectableDef = i0.defineInjectable({ factory: function FloFullscreenService_Factory() { return new FloFullscreenService(i0.inject(i0.NgZone), i0.inject(i1.DOCUMENT), i0.inject(i0.PLATFORM_ID), i0.inject(i2.FS_FULLSCREEN_REQUEST_EVENTS), i0.inject(i2.FS_FULLSCREEN_EXIT_EVENTS), i0.inject(i2.FS_FULLSCREEN_ELEMENT), i0.inject(i2.FS_FULLSCREEN_CHANGE_EVENTS), i0.inject(i2.FS_FULLSCREEN_ELEMENT_ERROR_EVENTS), i0.inject(i2.FS_FULLSCREEN_ENABLED), i0.inject(i2.FS_FULLSCREEN_ENABLED_FUNC), i0.inject(i2.FS_FULLSCREEN_IOS_POLL_MS), i0.inject(i2.FS_FULLSCREEN_IOS_POLL_ENABLED)); }, token: FloFullscreenService, providedIn: "root" });
    return FloFullscreenService;
}());
export { FloFullscreenService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iOSVideoState;
    /** @type {?} */
    FloFullscreenService.prototype.isFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.fullscreenError$;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosVideoBypass;
    /** @type {?} */
    FloFullscreenService.prototype.extractVideoForIphoneIfRequired;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosPoller;
    /** @type {?} */
    FloFullscreenService.prototype.fullscreen$;
    /** @type {?} */
    FloFullscreenService.prototype.fullscreenIsSupported;
    /** @type {?} */
    FloFullscreenService.prototype.canGoFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.isFullscreen$;
    /** @type {?} */
    FloFullscreenService.prototype.isNotFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.exitFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.goFullscreen;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.doc;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.requestEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.exitEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.elementKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.changeEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.elementErrorEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.enabledKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.enabledFunc;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosPollrate;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosPollEnabled;
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,