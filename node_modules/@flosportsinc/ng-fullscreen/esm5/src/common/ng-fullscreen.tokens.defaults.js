/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { fromEvent, of } from 'rxjs';
import { map, take } from 'rxjs/operators';
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_REQUEST_EVENTS = [
    'requestFullscreen',
    'webkitRequestFullscreen',
    'webkitRequestFullScreen',
    'mozRequestFullScreen',
    'msRequestFullscreen'
];
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_EXIT_EVENTS = [
    'exitFullscreen',
    'webkitExitFullscreen',
    'webkitCancelFullScreen',
    'mozCancelFullScreen',
    'msExitFullscreen'
];
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_ELEMENT_ERROR_EVENTS = [
    'fullscreenerror',
    'webkitfullscreenerror',
    'webkitfullscreenerror',
    'mozfullscreenerror',
    'MSFullscreenError'
];
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_ELEMENT = [
    'fullscreenElement',
    'webkitFullscreenElement',
    'webkitCurrentFullScreenElement',
    'mozFullScreenElement',
    'msFullscreenElement'
];
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_ENABLED = [
    'fullscreenEnabled',
    'mozFullscreenEnabled',
    'webkitFullscreenEnabled',
    'msFullscreenEnabled'
];
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_CHANGE_EVENTS = [
    'fullscreenchange',
    'webkitfullscreenchange',
    'mozfullscreenchange',
    'MSFullscreenChange'
];
/**
 * @return {?}
 */
export function DEFAULT_FS_FULLSCREEN_ENABLED_FUNC() {
    /** @type {?} */
    var lambda = (/**
     * @param {?} elm
     * @return {?}
     */
    function (elm) {
        /** @type {?} */
        var _elm = elm instanceof HTMLVideoElement ? elm : elm.querySelector('video');
        return !_elm ? of(false) : ((/** @type {?} */ (_elm))).readyState >= 2
            ? of(true)
            : fromEvent(_elm, 'loadedmetadata').pipe(map((/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) { return !evt.target ? false : ((/** @type {?} */ (evt.target))).webkitSupportsFullscreen; })), take(1));
    });
    return lambda;
}
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_IOS_POLL_ENABLED = true;
/** @type {?} */
export var DEFAULT_FS_FULLSCREEN_IOS_POLL_MS = 60;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZnVsbHNjcmVlbi50b2tlbnMuZGVmYXVsdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmxvc3BvcnRzaW5jL25nLWZ1bGxzY3JlZW4vIiwic291cmNlcyI6WyJzcmMvY29tbW9uL25nLWZ1bGxzY3JlZW4udG9rZW5zLmRlZmF1bHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFBOztBQUUxQyxNQUFNLEtBQU8sb0NBQW9DLEdBQTJDO0lBQzFGLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixxQkFBcUI7Q0FDdEI7O0FBRUQsTUFBTSxLQUFPLGlDQUFpQyxHQUF3QztJQUNwRixnQkFBZ0I7SUFDaEIsc0JBQXNCO0lBQ3RCLHdCQUF3QjtJQUN4QixxQkFBcUI7SUFDckIsa0JBQWtCO0NBQ25COztBQUVELE1BQU0sS0FBTywwQ0FBMEMsR0FBeUM7SUFDOUYsaUJBQWlCO0lBQ2pCLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtDQUNwQjs7QUFFRCxNQUFNLEtBQU8sNkJBQTZCLEdBQXlDO0lBQ2pGLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsZ0NBQWdDO0lBQ2hDLHNCQUFzQjtJQUN0QixxQkFBcUI7Q0FDdEI7O0FBRUQsTUFBTSxLQUFPLDZCQUE2QixHQUF5QztJQUNqRixtQkFBbUI7SUFDbkIsc0JBQXNCO0lBQ3RCLHlCQUF5QjtJQUN6QixxQkFBcUI7Q0FDdEI7O0FBRUQsTUFBTSxLQUFPLG1DQUFtQyxHQUEwQztJQUN4RixrQkFBa0I7SUFDbEIsd0JBQXdCO0lBQ3hCLHFCQUFxQjtJQUNyQixvQkFBb0I7Q0FDckI7Ozs7QUFFRCxNQUFNLFVBQVUsa0NBQWtDOztRQUMxQyxNQUFNOzs7O0lBQUcsVUFBQyxHQUFnQjs7WUFDeEIsSUFBSSxHQUFHLEdBQUcsWUFBWSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUMvRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQUEsSUFBSSxFQUFPLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQztZQUNwRCxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUNWLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUN0QyxHQUFHOzs7O1lBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBQSxHQUFHLENBQUMsTUFBTSxFQUFPLENBQUMsQ0FBQyx3QkFBd0IsRUFBbEUsQ0FBa0UsRUFBQyxFQUM5RSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQixDQUFDLENBQUE7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7O0FBRUQsTUFBTSxLQUFPLHNDQUFzQyxHQUFHLElBQUk7O0FBQzFELE1BQU0sS0FBTyxpQ0FBaUMsR0FBRyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRnVsbHNjcmVlblJlcXVlc3RFdmVudHMsIEZ1bGxzY3JlZW5FeGl0RXZlbnRzLCBGdWxsc2NyZWVuQ2hhbmdlRXZlbnRzLFxuICBGdWxsc2NyZWVuRXJyb3JFdmVudHMsIEZ1bGxzY3JlZW5FbmFibGVkS2V5cywgRnVsbHNjcmVlbkVsZW1lbnRLZXlzLCBGdWxsc2NyZWVuRW5hYmxlZEZ1bmNcbn0gZnJvbSAnLi9uZy1mdWxsc2NyZWVuLnRva2VucydcbmltcG9ydCB7IGZyb21FdmVudCwgb2YgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgbWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fUkVRVUVTVF9FVkVOVFM6IFJlYWRvbmx5QXJyYXk8RnVsbHNjcmVlblJlcXVlc3RFdmVudHM+ID0gW1xuICAncmVxdWVzdEZ1bGxzY3JlZW4nLFxuICAnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLFxuICAnd2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4nLFxuICAnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxuICAnbXNSZXF1ZXN0RnVsbHNjcmVlbidcbl1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRlNfRlVMTFNDUkVFTl9FWElUX0VWRU5UUzogUmVhZG9ubHlBcnJheTxGdWxsc2NyZWVuRXhpdEV2ZW50cz4gPSBbXG4gICdleGl0RnVsbHNjcmVlbicsXG4gICd3ZWJraXRFeGl0RnVsbHNjcmVlbicsXG4gICd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcbiAgJ21vekNhbmNlbEZ1bGxTY3JlZW4nLFxuICAnbXNFeGl0RnVsbHNjcmVlbidcbl1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRlNfRlVMTFNDUkVFTl9FTEVNRU5UX0VSUk9SX0VWRU5UUzogUmVhZG9ubHlBcnJheTxGdWxsc2NyZWVuRXJyb3JFdmVudHM+ID0gW1xuICAnZnVsbHNjcmVlbmVycm9yJyxcbiAgJ3dlYmtpdGZ1bGxzY3JlZW5lcnJvcicsXG4gICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InLFxuICAnbW96ZnVsbHNjcmVlbmVycm9yJyxcbiAgJ01TRnVsbHNjcmVlbkVycm9yJ1xuXVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9GU19GVUxMU0NSRUVOX0VMRU1FTlQ6IFJlYWRvbmx5QXJyYXk8RnVsbHNjcmVlbkVsZW1lbnRLZXlzPiA9IFtcbiAgJ2Z1bGxzY3JlZW5FbGVtZW50JyxcbiAgJ3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50JyxcbiAgJ3dlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudCcsXG4gICdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXG4gICdtc0Z1bGxzY3JlZW5FbGVtZW50J1xuXVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9GU19GVUxMU0NSRUVOX0VOQUJMRUQ6IFJlYWRvbmx5QXJyYXk8RnVsbHNjcmVlbkVuYWJsZWRLZXlzPiA9IFtcbiAgJ2Z1bGxzY3JlZW5FbmFibGVkJyxcbiAgJ21vekZ1bGxzY3JlZW5FbmFibGVkJyxcbiAgJ3dlYmtpdEZ1bGxzY3JlZW5FbmFibGVkJyxcbiAgJ21zRnVsbHNjcmVlbkVuYWJsZWQnXG5dXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fQ0hBTkdFX0VWRU5UUzogUmVhZG9ubHlBcnJheTxGdWxsc2NyZWVuQ2hhbmdlRXZlbnRzPiA9IFtcbiAgJ2Z1bGxzY3JlZW5jaGFuZ2UnLFxuICAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsXG4gICdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcbiAgJ01TRnVsbHNjcmVlbkNoYW5nZSdcbl1cblxuZXhwb3J0IGZ1bmN0aW9uIERFRkFVTFRfRlNfRlVMTFNDUkVFTl9FTkFCTEVEX0ZVTkMoKTogRnVsbHNjcmVlbkVuYWJsZWRGdW5jIHtcbiAgY29uc3QgbGFtYmRhID0gKGVsbTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBfZWxtID0gZWxtIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCA/IGVsbSA6IGVsbS5xdWVyeVNlbGVjdG9yKCd2aWRlbycpXG4gICAgcmV0dXJuICFfZWxtID8gb2YoZmFsc2UpIDogKF9lbG0gYXMgYW55KS5yZWFkeVN0YXRlID49IDJcbiAgICAgICAgPyBvZih0cnVlKVxuICAgICAgICA6IGZyb21FdmVudChfZWxtLCAnbG9hZGVkbWV0YWRhdGEnKS5waXBlKFxuICAgICAgICAgIG1hcChldnQgPT4gIWV2dC50YXJnZXQgPyBmYWxzZSA6IChldnQudGFyZ2V0IGFzIGFueSkud2Via2l0U3VwcG9ydHNGdWxsc2NyZWVuKSxcbiAgICAgICAgICB0YWtlKDEpKVxuICB9XG4gIHJldHVybiBsYW1iZGFcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRlNfRlVMTFNDUkVFTl9JT1NfUE9MTF9FTkFCTEVEID0gdHJ1ZVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRlNfRlVMTFNDUkVFTl9JT1NfUE9MTF9NUyA9IDYwXG4iXX0=