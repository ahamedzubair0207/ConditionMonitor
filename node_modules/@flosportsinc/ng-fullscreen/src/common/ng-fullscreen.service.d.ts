import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { FullscreenRequestEvents, FullscreenExitEvents, FullscreenElementKeys, FullscreenChangeEvents, FullscreenErrorEvents, FullscreenEnabledKeys, FullscreenEnabledFunc } from './ng-fullscreen.tokens';
export interface IFloFullscreenService {
    readonly fullscreen$: Observable<boolean>;
    readonly isFullscreen$: Observable<boolean>;
    readonly isNotFullscreen: Observable<boolean>;
    readonly exitFullscreen: () => void;
    readonly goFullscreen: (elm?: HTMLElement | HTMLDocument) => void;
    readonly canGoFullscreen: (elm?: HTMLElement) => Observable<boolean>;
    readonly fullscreenIsSupported: (elm?: HTMLElement) => Observable<boolean>;
    readonly isFullscreen: (elmOrDoc: HTMLDocument | HTMLElement) => boolean;
}
export declare class FloFullscreenService implements IFloFullscreenService {
    private zone;
    private doc;
    private platformId;
    private requestEventKeys;
    private exitEventKeys;
    private elementKeys;
    private changeEventKeys;
    private elementErrorEventKeys;
    private enabledKeys;
    private enabledFunc;
    private iosPollrate;
    private iosPollEnabled;
    constructor(zone: NgZone, doc: any, platformId: string, requestEventKeys: FullscreenRequestEvents[], exitEventKeys: FullscreenExitEvents[], elementKeys: FullscreenElementKeys[], changeEventKeys: FullscreenChangeEvents[], elementErrorEventKeys: FullscreenErrorEvents[], enabledKeys: FullscreenEnabledKeys[], enabledFunc: FullscreenEnabledFunc, iosPollrate: number, iosPollEnabled: boolean);
    private readonly iOSVideoState;
    readonly isFullscreen: (doc?: HTMLElement | HTMLDocument) => boolean;
    readonly fullscreenError$: Observable<Observable<never>>;
    private readonly iosVideoBypass;
    readonly extractVideoForIphoneIfRequired: (element: HTMLElement) => HTMLElement;
    private readonly iosPoller;
    readonly fullscreen$: Observable<boolean>;
    readonly fullscreenIsSupported: (elm?: HTMLElement | undefined) => Observable<boolean>;
    readonly canGoFullscreen: (elm?: HTMLElement | undefined) => Observable<boolean>;
    readonly isFullscreen$: Observable<boolean>;
    readonly isNotFullscreen: Observable<boolean>;
    readonly exitFullscreen: () => void;
    readonly goFullscreen: (elm?: HTMLElement | HTMLDocument) => void;
}
