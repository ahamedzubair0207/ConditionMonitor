/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, Inject, ChangeDetectorRef } from '@angular/core';
import { FloFullscreenService } from '../common/ng-fullscreen.service';
import { take } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
// tslint:disable: readonly-keyword
// tslint:disable: no-object-mutation
export class FloClickToEnterFullscreenDirective {
    /**
     * @param {?} fs
     * @param {?} doc
     * @param {?} cd
     */
    constructor(fs, doc, cd) {
        this.fs = fs;
        this.doc = doc;
        this.cd = cd;
    }
    /**
     * @return {?}
     */
    get floClickToEnterFullscreen() {
        return this._element;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set floClickToEnterFullscreen(val) {
        if (val instanceof HTMLElement) {
            this._element = val;
        }
        else {
            this._element = this.doc.body;
        }
    }
    /**
     * @return {?}
     */
    click() {
        this.cd.detectChanges();
        this.fs.isNotFullscreen.pipe(take(1)).subscribe((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            // should check for nested video elements to make iOS dev easier
            this.fs.goFullscreen(this.fs.extractVideoForIphoneIfRequired(this.floClickToEnterFullscreen));
        }));
    }
}
FloClickToEnterFullscreenDirective.decorators = [
    { type: Directive, args: [{
                selector: '[floClickToEnterFullscreen]',
            },] }
];
/** @nocollapse */
FloClickToEnterFullscreenDirective.ctorParameters = () => [
    { type: FloFullscreenService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef }
];
FloClickToEnterFullscreenDirective.propDecorators = {
    floClickToEnterFullscreen: [{ type: Input }],
    click: [{ type: HostListener, args: ['click', [],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype.fs;
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype.doc;
    /**
     * @type {?}
     * @private
     */
    FloClickToEnterFullscreenDirective.prototype.cd;
}
export class FloClickToExitFullscreenDirective {
    /**
     * @param {?} fs
     */
    constructor(fs) {
        this.fs = fs;
    }
    /**
     * @return {?}
     */
    click() {
        this.fs.exitFullscreen();
    }
}
FloClickToExitFullscreenDirective.decorators = [
    { type: Directive, args: [{
                selector: '[floClickToExitFullscreen]',
            },] }
];
/** @nocollapse */
FloClickToExitFullscreenDirective.ctorParameters = () => [
    { type: FloFullscreenService }
];
FloClickToExitFullscreenDirective.propDecorators = {
    click: [{ type: HostListener, args: ['click', [],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FloClickToExitFullscreenDirective.prototype.fs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZnVsbHNjcmVlbi50b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZsb3Nwb3J0c2luYy9uZy1mdWxsc2NyZWVuLyIsInNvdXJjZXMiOlsic3JjL3RvZ2dsZS9uZy1mdWxsc2NyZWVuLnRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDekYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUE7QUFDdEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTs7O0FBUTFDLE1BQU0sT0FBTyxrQ0FBa0M7Ozs7OztJQUM3QyxZQUFvQixFQUF3QixFQUE0QixHQUFRLEVBQVUsRUFBcUI7UUFBM0YsT0FBRSxHQUFGLEVBQUUsQ0FBc0I7UUFBNEIsUUFBRyxHQUFILEdBQUcsQ0FBSztRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQUksQ0FBQzs7OztJQUlwSCxJQUNJLHlCQUF5QjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUE7SUFDdEIsQ0FBQzs7Ozs7SUFDRCxJQUFJLHlCQUF5QixDQUFDLEdBQVE7UUFDcEMsSUFBSSxHQUFHLFlBQVksV0FBVyxFQUFFO1lBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFBO1NBQ3BCO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1NBQzlCO0lBQ0gsQ0FBQzs7OztJQUUwQixLQUFLO1FBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUNsRCxnRUFBZ0U7WUFDaEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFBO1FBQy9GLENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQzs7O1lBMUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2FBQ3hDOzs7O1lBVFEsb0JBQW9COzRDQVdvQixNQUFNLFNBQUMsUUFBUTtZQVpmLGlCQUFpQjs7O3dDQWdCL0QsS0FBSztvQkFZTCxZQUFZLFNBQUMsT0FBTyxFQUFFLEVBQUU7Ozs7Ozs7SUFkekIsc0RBQTRDOzs7OztJQUZoQyxnREFBZ0M7Ozs7O0lBQUUsaURBQWtDOzs7OztJQUFFLGdEQUE2Qjs7QUE0QmpILE1BQU0sT0FBTyxpQ0FBaUM7Ozs7SUFDNUMsWUFBb0IsRUFBd0I7UUFBeEIsT0FBRSxHQUFGLEVBQUUsQ0FBc0I7SUFBSSxDQUFDOzs7O0lBRXRCLEtBQUs7UUFDOUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtJQUMxQixDQUFDOzs7WUFSRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjthQUN2Qzs7OztZQXRDUSxvQkFBb0I7OztvQkEwQzFCLFlBQVksU0FBQyxPQUFPLEVBQUUsRUFBRTs7Ozs7OztJQUZiLCtDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCwgSW5qZWN0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBGbG9GdWxsc2NyZWVuU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9uZy1mdWxsc2NyZWVuLnNlcnZpY2UnXG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbidcblxuLy8gdHNsaW50OmRpc2FibGU6IHJlYWRvbmx5LWtleXdvcmRcbi8vIHRzbGludDpkaXNhYmxlOiBuby1vYmplY3QtbXV0YXRpb25cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zsb0NsaWNrVG9FbnRlckZ1bGxzY3JlZW5dJyxcbn0pXG5leHBvcnQgY2xhc3MgRmxvQ2xpY2tUb0VudGVyRnVsbHNjcmVlbkRpcmVjdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnM6IEZsb0Z1bGxzY3JlZW5TZXJ2aWNlLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvYzogYW55LCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQgfCBIVE1MRG9jdW1lbnRcblxuICBASW5wdXQoKVxuICBnZXQgZmxvQ2xpY2tUb0VudGVyRnVsbHNjcmVlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFxuICB9XG4gIHNldCBmbG9DbGlja1RvRW50ZXJGdWxsc2NyZWVuKHZhbDogYW55KSB7XG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gdmFsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLmRvYy5ib2R5XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbXSkgY2xpY2soKSB7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKClcbiAgICB0aGlzLmZzLmlzTm90RnVsbHNjcmVlbi5waXBlKHRha2UoMSkpLnN1YnNjcmliZShfID0+IHtcbiAgICAgIC8vIHNob3VsZCBjaGVjayBmb3IgbmVzdGVkIHZpZGVvIGVsZW1lbnRzIHRvIG1ha2UgaU9TIGRldiBlYXNpZXJcbiAgICAgIHRoaXMuZnMuZ29GdWxsc2NyZWVuKHRoaXMuZnMuZXh0cmFjdFZpZGVvRm9ySXBob25lSWZSZXF1aXJlZCh0aGlzLmZsb0NsaWNrVG9FbnRlckZ1bGxzY3JlZW4pKVxuICAgIH0pXG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zsb0NsaWNrVG9FeGl0RnVsbHNjcmVlbl0nLFxufSlcbmV4cG9ydCBjbGFzcyBGbG9DbGlja1RvRXhpdEZ1bGxzY3JlZW5EaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZzOiBGbG9GdWxsc2NyZWVuU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbXSkgY2xpY2soKSB7XG4gICAgdGhpcy5mcy5leGl0RnVsbHNjcmVlbigpXG4gIH1cbn1cbiJdfQ==