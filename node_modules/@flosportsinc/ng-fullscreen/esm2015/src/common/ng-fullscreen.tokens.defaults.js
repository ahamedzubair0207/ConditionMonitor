/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { fromEvent, of } from 'rxjs';
import { map, take } from 'rxjs/operators';
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_REQUEST_EVENTS = [
    'requestFullscreen',
    'webkitRequestFullscreen',
    'webkitRequestFullScreen',
    'mozRequestFullScreen',
    'msRequestFullscreen'
];
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_EXIT_EVENTS = [
    'exitFullscreen',
    'webkitExitFullscreen',
    'webkitCancelFullScreen',
    'mozCancelFullScreen',
    'msExitFullscreen'
];
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_ELEMENT_ERROR_EVENTS = [
    'fullscreenerror',
    'webkitfullscreenerror',
    'webkitfullscreenerror',
    'mozfullscreenerror',
    'MSFullscreenError'
];
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_ELEMENT = [
    'fullscreenElement',
    'webkitFullscreenElement',
    'webkitCurrentFullScreenElement',
    'mozFullScreenElement',
    'msFullscreenElement'
];
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_ENABLED = [
    'fullscreenEnabled',
    'mozFullscreenEnabled',
    'webkitFullscreenEnabled',
    'msFullscreenEnabled'
];
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_CHANGE_EVENTS = [
    'fullscreenchange',
    'webkitfullscreenchange',
    'mozfullscreenchange',
    'MSFullscreenChange'
];
/**
 * @return {?}
 */
export function DEFAULT_FS_FULLSCREEN_ENABLED_FUNC() {
    /** @type {?} */
    const lambda = (/**
     * @param {?} elm
     * @return {?}
     */
    (elm) => {
        /** @type {?} */
        const _elm = elm instanceof HTMLVideoElement ? elm : elm.querySelector('video');
        return !_elm ? of(false) : ((/** @type {?} */ (_elm))).readyState >= 2
            ? of(true)
            : fromEvent(_elm, 'loadedmetadata').pipe(map((/**
             * @param {?} evt
             * @return {?}
             */
            evt => !evt.target ? false : ((/** @type {?} */ (evt.target))).webkitSupportsFullscreen)), take(1));
    });
    return lambda;
}
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_IOS_POLL_ENABLED = true;
/** @type {?} */
export const DEFAULT_FS_FULLSCREEN_IOS_POLL_MS = 60;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZnVsbHNjcmVlbi50b2tlbnMuZGVmYXVsdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmxvc3BvcnRzaW5jL25nLWZ1bGxzY3JlZW4vIiwic291cmNlcyI6WyJzcmMvY29tbW9uL25nLWZ1bGxzY3JlZW4udG9rZW5zLmRlZmF1bHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFBOztBQUUxQyxNQUFNLE9BQU8sb0NBQW9DLEdBQTJDO0lBQzFGLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixxQkFBcUI7Q0FDdEI7O0FBRUQsTUFBTSxPQUFPLGlDQUFpQyxHQUF3QztJQUNwRixnQkFBZ0I7SUFDaEIsc0JBQXNCO0lBQ3RCLHdCQUF3QjtJQUN4QixxQkFBcUI7SUFDckIsa0JBQWtCO0NBQ25COztBQUVELE1BQU0sT0FBTywwQ0FBMEMsR0FBeUM7SUFDOUYsaUJBQWlCO0lBQ2pCLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtDQUNwQjs7QUFFRCxNQUFNLE9BQU8sNkJBQTZCLEdBQXlDO0lBQ2pGLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsZ0NBQWdDO0lBQ2hDLHNCQUFzQjtJQUN0QixxQkFBcUI7Q0FDdEI7O0FBRUQsTUFBTSxPQUFPLDZCQUE2QixHQUF5QztJQUNqRixtQkFBbUI7SUFDbkIsc0JBQXNCO0lBQ3RCLHlCQUF5QjtJQUN6QixxQkFBcUI7Q0FDdEI7O0FBRUQsTUFBTSxPQUFPLG1DQUFtQyxHQUEwQztJQUN4RixrQkFBa0I7SUFDbEIsd0JBQXdCO0lBQ3hCLHFCQUFxQjtJQUNyQixvQkFBb0I7Q0FDckI7Ozs7QUFFRCxNQUFNLFVBQVUsa0NBQWtDOztVQUMxQyxNQUFNOzs7O0lBQUcsQ0FBQyxHQUFnQixFQUFFLEVBQUU7O2NBQzVCLElBQUksR0FBRyxHQUFHLFlBQVksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDL0UsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFBLElBQUksRUFBTyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUM7WUFDcEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDVixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FDdEMsR0FBRzs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQUEsR0FBRyxDQUFDLE1BQU0sRUFBTyxDQUFDLENBQUMsd0JBQXdCLEVBQUMsRUFDOUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDaEIsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDOztBQUVELE1BQU0sT0FBTyxzQ0FBc0MsR0FBRyxJQUFJOztBQUMxRCxNQUFNLE9BQU8saUNBQWlDLEdBQUcsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZ1bGxzY3JlZW5SZXF1ZXN0RXZlbnRzLCBGdWxsc2NyZWVuRXhpdEV2ZW50cywgRnVsbHNjcmVlbkNoYW5nZUV2ZW50cyxcbiAgRnVsbHNjcmVlbkVycm9yRXZlbnRzLCBGdWxsc2NyZWVuRW5hYmxlZEtleXMsIEZ1bGxzY3JlZW5FbGVtZW50S2V5cywgRnVsbHNjcmVlbkVuYWJsZWRGdW5jXG59IGZyb20gJy4vbmctZnVsbHNjcmVlbi50b2tlbnMnXG5pbXBvcnQgeyBmcm9tRXZlbnQsIG9mIH0gZnJvbSAncnhqcydcbmltcG9ydCB7IG1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9GU19GVUxMU0NSRUVOX1JFUVVFU1RfRVZFTlRTOiBSZWFkb25seUFycmF5PEZ1bGxzY3JlZW5SZXF1ZXN0RXZlbnRzPiA9IFtcbiAgJ3JlcXVlc3RGdWxsc2NyZWVuJyxcbiAgJ3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJyxcbiAgJ3dlYmtpdFJlcXVlc3RGdWxsU2NyZWVuJyxcbiAgJ21velJlcXVlc3RGdWxsU2NyZWVuJyxcbiAgJ21zUmVxdWVzdEZ1bGxzY3JlZW4nXG5dXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fRVhJVF9FVkVOVFM6IFJlYWRvbmx5QXJyYXk8RnVsbHNjcmVlbkV4aXRFdmVudHM+ID0gW1xuICAnZXhpdEZ1bGxzY3JlZW4nLFxuICAnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLFxuICAnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsXG4gICdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcbiAgJ21zRXhpdEZ1bGxzY3JlZW4nXG5dXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fRUxFTUVOVF9FUlJPUl9FVkVOVFM6IFJlYWRvbmx5QXJyYXk8RnVsbHNjcmVlbkVycm9yRXZlbnRzPiA9IFtcbiAgJ2Z1bGxzY3JlZW5lcnJvcicsXG4gICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InLFxuICAnd2Via2l0ZnVsbHNjcmVlbmVycm9yJyxcbiAgJ21vemZ1bGxzY3JlZW5lcnJvcicsXG4gICdNU0Z1bGxzY3JlZW5FcnJvcidcbl1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRlNfRlVMTFNDUkVFTl9FTEVNRU5UOiBSZWFkb25seUFycmF5PEZ1bGxzY3JlZW5FbGVtZW50S2V5cz4gPSBbXG4gICdmdWxsc2NyZWVuRWxlbWVudCcsXG4gICd3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCcsXG4gICd3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQnLFxuICAnbW96RnVsbFNjcmVlbkVsZW1lbnQnLFxuICAnbXNGdWxsc2NyZWVuRWxlbWVudCdcbl1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRlNfRlVMTFNDUkVFTl9FTkFCTEVEOiBSZWFkb25seUFycmF5PEZ1bGxzY3JlZW5FbmFibGVkS2V5cz4gPSBbXG4gICdmdWxsc2NyZWVuRW5hYmxlZCcsXG4gICdtb3pGdWxsc2NyZWVuRW5hYmxlZCcsXG4gICd3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCcsXG4gICdtc0Z1bGxzY3JlZW5FbmFibGVkJ1xuXVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9GU19GVUxMU0NSRUVOX0NIQU5HRV9FVkVOVFM6IFJlYWRvbmx5QXJyYXk8RnVsbHNjcmVlbkNoYW5nZUV2ZW50cz4gPSBbXG4gICdmdWxsc2NyZWVuY2hhbmdlJyxcbiAgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAnbW96ZnVsbHNjcmVlbmNoYW5nZScsXG4gICdNU0Z1bGxzY3JlZW5DaGFuZ2UnXG5dXG5cbmV4cG9ydCBmdW5jdGlvbiBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fRU5BQkxFRF9GVU5DKCk6IEZ1bGxzY3JlZW5FbmFibGVkRnVuYyB7XG4gIGNvbnN0IGxhbWJkYSA9IChlbG06IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgX2VsbSA9IGVsbSBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQgPyBlbG0gOiBlbG0ucXVlcnlTZWxlY3RvcigndmlkZW8nKVxuICAgIHJldHVybiAhX2VsbSA/IG9mKGZhbHNlKSA6IChfZWxtIGFzIGFueSkucmVhZHlTdGF0ZSA+PSAyXG4gICAgICAgID8gb2YodHJ1ZSlcbiAgICAgICAgOiBmcm9tRXZlbnQoX2VsbSwgJ2xvYWRlZG1ldGFkYXRhJykucGlwZShcbiAgICAgICAgICBtYXAoZXZ0ID0+ICFldnQudGFyZ2V0ID8gZmFsc2UgOiAoZXZ0LnRhcmdldCBhcyBhbnkpLndlYmtpdFN1cHBvcnRzRnVsbHNjcmVlbiksXG4gICAgICAgICAgdGFrZSgxKSlcbiAgfVxuICByZXR1cm4gbGFtYmRhXG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fSU9TX1BPTExfRU5BQkxFRCA9IHRydWVcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZTX0ZVTExTQ1JFRU5fSU9TX1BPTExfTVMgPSA2MFxuIl19