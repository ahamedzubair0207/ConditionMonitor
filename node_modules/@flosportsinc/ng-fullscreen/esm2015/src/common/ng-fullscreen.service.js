/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isIphone } from './util';
import { DOCUMENT, isPlatformServer } from '@angular/common';
import { Injectable, Inject, PLATFORM_ID, NgZone } from '@angular/core';
import { merge, fromEvent, throwError, of, interval, BehaviorSubject, EMPTY } from 'rxjs';
import { debounceTime, map, startWith, shareReplay, filter, flatMap, tap, distinctUntilChanged, take, takeUntil } from 'rxjs/operators';
import { FS_FULLSCREEN_REQUEST_EVENTS, FS_FULLSCREEN_EXIT_EVENTS, FS_FULLSCREEN_ELEMENT, FS_FULLSCREEN_CHANGE_EVENTS, FS_FULLSCREEN_ELEMENT_ERROR_EVENTS, FS_FULLSCREEN_ENABLED, FS_FULLSCREEN_ENABLED_FUNC, FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED } from './ng-fullscreen.tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./ng-fullscreen.tokens";
/** @type {?} */
const isKeyTrue = (/**
 * @param {?} platformKeys
 * @return {?}
 */
(platformKeys) => (/**
 * @param {?} doc
 * @return {?}
 */
(doc) => platformKeys.reduce((/**
 * @param {?} acc
 * @param {?} curr
 * @return {?}
 */
(acc, curr) => acc || doc[curr] ? true : false), false)));
const ɵ0 = isKeyTrue;
/** @type {?} */
const fullscreenChangeError = (/**
 * @param {?} platformKeys
 * @return {?}
 */
(platformKeys) => (/**
 * @param {?} doc
 * @return {?}
 */
(doc) => merge(...platformKeys.map((/**
 * @param {?} key
 * @return {?}
 */
key => fromEvent(doc, key)))).pipe(debounceTime(0))));
const ɵ1 = fullscreenChangeError;
/** @type {?} */
const filterAndExecute = (/**
 * @param {?} ref
 * @return {?}
 */
(ref) => (/**
 * @param {?} arr
 * @return {?}
 */
(arr) => {
    /** @type {?} */
    const funcStringIdx = arr.findIndex((/**
     * @param {?} a
     * @return {?}
     */
    a => typeof ref[a] === 'function'));
    if (funcStringIdx >= 0) {
        ref[arr[funcStringIdx]]();
    }
}));
const ɵ2 = filterAndExecute;
/**
 * @record
 */
export function IFloFullscreenService() { }
if (false) {
    /** @type {?} */
    IFloFullscreenService.prototype.fullscreen$;
    /** @type {?} */
    IFloFullscreenService.prototype.isFullscreen$;
    /** @type {?} */
    IFloFullscreenService.prototype.isNotFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.exitFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.goFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.canGoFullscreen;
    /** @type {?} */
    IFloFullscreenService.prototype.fullscreenIsSupported;
    /** @type {?} */
    IFloFullscreenService.prototype.isFullscreen;
}
export class FloFullscreenService {
    // tslint:disable: readonly-array
    /**
     * @param {?} zone
     * @param {?} doc
     * @param {?} platformId
     * @param {?} requestEventKeys
     * @param {?} exitEventKeys
     * @param {?} elementKeys
     * @param {?} changeEventKeys
     * @param {?} elementErrorEventKeys
     * @param {?} enabledKeys
     * @param {?} enabledFunc
     * @param {?} iosPollrate
     * @param {?} iosPollEnabled
     */
    constructor(zone, doc, platformId, requestEventKeys, exitEventKeys, elementKeys, changeEventKeys, elementErrorEventKeys, enabledKeys, enabledFunc, iosPollrate, iosPollEnabled) {
        this.zone = zone;
        this.doc = doc;
        this.platformId = platformId;
        this.requestEventKeys = requestEventKeys;
        this.exitEventKeys = exitEventKeys;
        this.elementKeys = elementKeys;
        this.changeEventKeys = changeEventKeys;
        this.elementErrorEventKeys = elementErrorEventKeys;
        this.enabledKeys = enabledKeys;
        this.enabledFunc = enabledFunc;
        this.iosPollrate = iosPollrate;
        this.iosPollEnabled = iosPollEnabled;
        this.iOSVideoState = new BehaviorSubject(false);
        this.isFullscreen = (/**
         * @param {?=} doc
         * @return {?}
         */
        (doc = this.doc) => isPlatformServer(this.platformId) ? false : isKeyTrue(this.elementKeys)(doc) || this.iOSVideoState.getValue());
        this.fullscreenError$ = fullscreenChangeError(this.elementErrorEventKeys)(this.doc).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        e => throwError(e))));
        this.iosVideoBypass = (/**
         * @param {?} pasthrough
         * @return {?}
         */
        (pasthrough) => isIphone() ? ['webkitEnterFullscreen'] : pasthrough);
        this.extractVideoForIphoneIfRequired = (/**
         * @param {?} element
         * @return {?}
         */
        (element) => isIphone() && !(element instanceof HTMLVideoElement)
            ? element.querySelector('video') || element
            : element);
        this.iosPoller = (/**
         * @return {?}
         */
        () => !this.iosPollEnabled
            ? EMPTY
            : this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => interval(this.iosPollrate).pipe(map((/**
             * @return {?}
             */
            () => Array.from(((/** @type {?} */ (this.doc))).querySelectorAll('video')))), flatMap((/**
             * @param {?} videoElements
             * @return {?}
             */
            videoElements => merge(...videoElements.map((/**
             * @param {?} ve
             * @return {?}
             */
            ve => fromEvent(ve, 'webkitbeginfullscreen').pipe(tap((/**
             * @return {?}
             */
            () => this.iOSVideoState.next(true))), take(1)))), ...videoElements.map((/**
             * @param {?} ve
             * @return {?}
             */
            ve => fromEvent(ve, 'webkitendfullscreen').pipe(tap((/**
             * @return {?}
             */
            () => this.iOSVideoState.next(false))), take(1))))))), takeUntil(this.iOSVideoState)))));
        this.fullscreen$ = isPlatformServer(this.platformId)
            ? of(false)
            : merge(...this.changeEventKeys.map((/**
             * @param {?} key
             * @return {?}
             */
            key => fromEvent(this.doc, key))), this.fullscreenError$, this.iosPoller()).pipe(debounceTime(0), map((/**
             * @return {?}
             */
            () => this.isFullscreen())), distinctUntilChanged(), startWith(this.isFullscreen()), shareReplay(1));
        this.fullscreenIsSupported = (/**
         * @param {?=} elm
         * @return {?}
         */
        (elm) => (isPlatformServer(this.platformId)
            ? of(false)
            : isKeyTrue(this.enabledKeys)(this.doc)
                ? of(true)
                : !elm
                    ? of(false)
                    : this.enabledFunc(elm)).pipe(shareReplay(1)));
        this.canGoFullscreen = (/**
         * @param {?=} elm
         * @return {?}
         */
        (elm) => (isPlatformServer(this.platformId)
            ? of(false)
            : this.fullscreenIsSupported(elm)
                .pipe(flatMap((/**
             * @param {?} isSupported
             * @return {?}
             */
            isSupported => !isSupported
                ? of(false)
                : this.fullscreen$.pipe(map((/**
                 * @param {?} isfs
                 * @return {?}
                 */
                isfs => isfs ? false : true))))))).pipe(shareReplay(1)));
        this.isFullscreen$ = this.fullscreen$.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v === true)));
        this.isNotFullscreen = this.fullscreen$.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v === false)));
        this.exitFullscreen = (/**
         * @return {?}
         */
        () => filterAndExecute(this.doc)(this.exitEventKeys));
        this.goFullscreen = (/**
         * @param {?=} elm
         * @return {?}
         */
        (elm = this.doc.body) => filterAndExecute(elm)(this.iosVideoBypass(this.requestEventKeys)));
    }
}
FloFullscreenService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
FloFullscreenService.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_REQUEST_EVENTS,] }] },
    { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_EXIT_EVENTS,] }] },
    { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ELEMENT,] }] },
    { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_CHANGE_EVENTS,] }] },
    { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ELEMENT_ERROR_EVENTS,] }] },
    { type: Array, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ENABLED,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [FS_FULLSCREEN_ENABLED_FUNC,] }] },
    { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] }
];
/** @nocollapse */ FloFullscreenService.ngInjectableDef = i0.defineInjectable({ factory: function FloFullscreenService_Factory() { return new FloFullscreenService(i0.inject(i0.NgZone), i0.inject(i1.DOCUMENT), i0.inject(i0.PLATFORM_ID), i0.inject(i2.FS_FULLSCREEN_REQUEST_EVENTS), i0.inject(i2.FS_FULLSCREEN_EXIT_EVENTS), i0.inject(i2.FS_FULLSCREEN_ELEMENT), i0.inject(i2.FS_FULLSCREEN_CHANGE_EVENTS), i0.inject(i2.FS_FULLSCREEN_ELEMENT_ERROR_EVENTS), i0.inject(i2.FS_FULLSCREEN_ENABLED), i0.inject(i2.FS_FULLSCREEN_ENABLED_FUNC), i0.inject(i2.FS_FULLSCREEN_IOS_POLL_MS), i0.inject(i2.FS_FULLSCREEN_IOS_POLL_ENABLED)); }, token: FloFullscreenService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iOSVideoState;
    /** @type {?} */
    FloFullscreenService.prototype.isFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.fullscreenError$;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosVideoBypass;
    /** @type {?} */
    FloFullscreenService.prototype.extractVideoForIphoneIfRequired;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosPoller;
    /** @type {?} */
    FloFullscreenService.prototype.fullscreen$;
    /** @type {?} */
    FloFullscreenService.prototype.fullscreenIsSupported;
    /** @type {?} */
    FloFullscreenService.prototype.canGoFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.isFullscreen$;
    /** @type {?} */
    FloFullscreenService.prototype.isNotFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.exitFullscreen;
    /** @type {?} */
    FloFullscreenService.prototype.goFullscreen;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.doc;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.requestEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.exitEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.elementKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.changeEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.elementErrorEventKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.enabledKeys;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.enabledFunc;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosPollrate;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenService.prototype.iosPollEnabled;
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,