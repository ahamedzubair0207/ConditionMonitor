/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef, ChangeDetectorRef, Inject, NgZone } from '@angular/core';
import { takeUntil, flatMap, startWith, delay, tap, distinctUntilChanged } from 'rxjs/operators';
import { Subject, combineLatest, interval } from 'rxjs';
import { FloFullscreenService } from '../common/ng-fullscreen.service';
import { isIphone } from '../common/util';
import { FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED } from '../common/ng-fullscreen.tokens';
// tslint:disable: readonly-keyword
/**
 * @abstract
 */
export class FloFullscreenDirective {
    /**
     * @param {?} tr
     * @param {?} vc
     * @param {?} fs
     * @param {?} cd
     * @param {?} iosPollEnabled
     * @param {?} iosPollrate
     * @param {?} zone
     */
    constructor(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) {
        this.tr = tr;
        this.vc = vc;
        this.fs = fs;
        this.cd = cd;
        this.iosPollEnabled = iosPollEnabled;
        this.iosPollrate = iosPollrate;
        this.zone = zone;
        this.elmSource = new Subject();
        this.showWhenFullscreen = false;
        this.ngOnDestroy$ = new Subject();
        this.elm = (/**
         * @return {?}
         */
        () => this.elmInputKey ? (/** @type {?} */ (this[this.elmInputKey])) : undefined);
        this.elm$ = this.elmSource.asObservable();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        combineLatest(this.fs.fullscreen$, this.elm$.pipe(tap((/**
         * @return {?}
         */
        () => this.cd.detectChanges())), startWith(this.elm()), delay(0), flatMap((/**
         * @param {?} elm
         * @return {?}
         */
        elm => this.iosPollEnabled && isIphone()
            ? this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => interval(this.iosPollrate).pipe(flatMap((/**
             * @return {?}
             */
            () => this.fs.fullscreenIsSupported(elm))), distinctUntilChanged(), takeUntil(this.ngOnDestroy$))))
            : this.fs.fullscreenIsSupported(elm))), takeUntil(this.ngOnDestroy$))).pipe(takeUntil(this.ngOnDestroy$)).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            /** @type {?} */
            const isFullscreen = res[0];
            /** @type {?} */
            const isSupported = res[1];
            this.vc.clear();
            if (this.showWhenFullscreen) { // exit
                if (isFullscreen) {
                    this.vc.createEmbeddedView(this.tr);
                }
            }
            else if (!isFullscreen) { // enter
                if (isSupported) {
                    this.vc.createEmbeddedView(this.tr);
                }
            }
            this.cd.detectChanges();
        }));
    }
    /**
     * @param {?} sc
     * @return {?}
     */
    ngOnChanges(sc) {
        if (this.elmInputKey && sc[this.elmInputKey]) {
            this.elmSource.next(sc[this.elmInputKey].currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ngOnDestroy$.next();
        this.ngOnDestroy$.complete();
    }
}
/** @nocollapse */
FloFullscreenDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: FloFullscreenService },
    { type: ChangeDetectorRef },
    { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] },
    { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.elmInputKey;
    /**
     * @type {?}
     * @private
     */
    FloFullscreenDirective.prototype.elmSource;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.showWhenFullscreen;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.ngOnDestroy$;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.elm;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.elm$;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.tr;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.vc;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.fs;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.cd;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.iosPollEnabled;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.iosPollrate;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenDirective.prototype.zone;
}
/** @type {?} */
const IF_FS_SELECTOR = 'floIfFullscreen';
export class FloFullscreenOnDirective extends FloFullscreenDirective {
    /**
     * @param {?} tr
     * @param {?} vc
     * @param {?} fs
     * @param {?} cd
     * @param {?} iosPollEnabled
     * @param {?} iosPollrate
     * @param {?} zone
     */
    constructor(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) {
        super(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone);
        this.tr = tr;
        this.vc = vc;
        this.fs = fs;
        this.cd = cd;
        this.iosPollEnabled = iosPollEnabled;
        this.iosPollrate = iosPollrate;
        this.zone = zone;
        this.elmInputKey = IF_FS_SELECTOR;
        this.showWhenFullscreen = true;
    }
}
FloFullscreenOnDirective.decorators = [
    { type: Directive, args: [{
                selector: `[${IF_FS_SELECTOR}]`,
                inputs: [IF_FS_SELECTOR]
            },] }
];
/** @nocollapse */
FloFullscreenOnDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: FloFullscreenService },
    { type: ChangeDetectorRef },
    { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] },
    { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    FloFullscreenOnDirective.prototype.elmInputKey;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.tr;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.vc;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.fs;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.cd;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.iosPollEnabled;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.iosPollrate;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOnDirective.prototype.zone;
}
/** @type {?} */
const IF_NOT_FS_SELECTOR = 'floIfNotFullscreen';
export class FloFullscreenOffDirective extends FloFullscreenDirective {
    /**
     * @param {?} tr
     * @param {?} vc
     * @param {?} fs
     * @param {?} cd
     * @param {?} iosPollEnabled
     * @param {?} iosPollrate
     * @param {?} zone
     */
    constructor(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone) {
        super(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone);
        this.tr = tr;
        this.vc = vc;
        this.fs = fs;
        this.cd = cd;
        this.iosPollEnabled = iosPollEnabled;
        this.iosPollrate = iosPollrate;
        this.zone = zone;
        this.elmInputKey = IF_NOT_FS_SELECTOR;
        this.showWhenFullscreen = false;
    }
}
FloFullscreenOffDirective.decorators = [
    { type: Directive, args: [{
                selector: `[${IF_NOT_FS_SELECTOR}]`,
                inputs: [IF_NOT_FS_SELECTOR]
            },] }
];
/** @nocollapse */
FloFullscreenOffDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: FloFullscreenService },
    { type: ChangeDetectorRef },
    { type: Boolean, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_ENABLED,] }] },
    { type: Number, decorators: [{ type: Inject, args: [FS_FULLSCREEN_IOS_POLL_MS,] }] },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    FloFullscreenOffDirective.prototype.elmInputKey;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.tr;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.vc;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.fs;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.cd;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.iosPollEnabled;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.iosPollrate;
    /**
     * @type {?}
     * @protected
     */
    FloFullscreenOffDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,