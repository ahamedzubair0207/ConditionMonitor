{"version":3,"file":"flosportsinc-ng-fullscreen.js","sources":["ng://@flosportsinc/ng-fullscreen/src/common/util.ts","ng://@flosportsinc/ng-fullscreen/src/common/ng-fullscreen.tokens.ts","ng://@flosportsinc/ng-fullscreen/src/common/ng-fullscreen.service.ts","ng://@flosportsinc/ng-fullscreen/src/common/ng-fullscreen.tokens.defaults.ts","ng://@flosportsinc/ng-fullscreen/src/common/ng-fullscreen.module.ts","ng://@flosportsinc/ng-fullscreen/src/toggle/ng-fullscreen.toggle.directive.ts","ng://@flosportsinc/ng-fullscreen/src/toggle/ng-fullscreen.toggle.module.ts","ng://@flosportsinc/ng-fullscreen/src/switch/ng-fullscreen.switch.directive.ts","ng://@flosportsinc/ng-fullscreen/src/switch/ng-fullscreen.switch.module.ts","ng://@flosportsinc/ng-fullscreen/src/ng-fullscreen.module.ts"],"sourcesContent":["export const isIphone = () => typeof window === 'undefined' || typeof window.navigator === 'undefined'\n  ? false\n  : window.navigator.userAgent.match(/iPhone/)\n    ? true :\n    false\n","import { InjectionToken } from '@angular/core'\nimport { Observable } from 'rxjs'\n\n// tslint:disable: max-line-length\nexport type FullscreenRequestEvents = 'requestFullscreen' | 'webkitRequestFullscreen' | 'webkitRequestFullScreen' | 'mozRequestFullScreen' | 'msRequestFullscreen'\nexport type FullscreenExitEvents = 'exitFullscreen' | 'webkitExitFullscreen' | 'webkitCancelFullScreen' | 'mozCancelFullScreen' | 'msExitFullscreen'\nexport type FullscreenChangeEvents = 'fullscreenchange' | 'webkitfullscreenchange' | 'mozfullscreenchange' | 'MSFullscreenChange'\nexport type FullscreenErrorEvents = 'fullscreenerror' | 'webkitfullscreenerror' | 'webkitfullscreenerror' | 'mozfullscreenerror' | 'MSFullscreenError'\nexport type FullscreenElementKeys = 'fullscreenElement' | 'webkitFullscreenElement' | 'webkitCurrentFullScreenElement' | 'mozFullScreenElement' | 'msFullscreenElement'\nexport type FullscreenEnabledKeys = 'fullscreenEnabled' | 'mozFullscreenEnabled' | 'webkitFullscreenEnabled' | 'msFullscreenEnabled'\n\nexport type FullscreenEnabledFunc = (elm: HTMLElement) => Observable<boolean>\n\nexport const FS_FULLSCREEN_REQUEST_EVENTS = new InjectionToken<ReadonlyArray<FullscreenRequestEvents>>('fs.fullscreen.request')\nexport const FS_FULLSCREEN_EXIT_EVENTS = new InjectionToken<ReadonlyArray<FullscreenExitEvents>>('fs.fullscreen.exit')\nexport const FS_FULLSCREEN_CHANGE_EVENTS = new InjectionToken<ReadonlyArray<FullscreenChangeEvents>>('fs.fullscreen.change')\nexport const FS_FULLSCREEN_ELEMENT_ERROR_EVENTS = new InjectionToken<ReadonlyArray<FullscreenErrorEvents>>('fs.fullscreen.error')\nexport const FS_FULLSCREEN_ELEMENT = new InjectionToken<ReadonlyArray<FullscreenElementKeys>>('fs.fullscreen.element')\nexport const FS_FULLSCREEN_ENABLED = new InjectionToken<ReadonlyArray<FullscreenEnabledKeys>>('fs.fullscreen.enabled')\nexport const FS_FULLSCREEN_ENABLED_FUNC = new InjectionToken<FullscreenEnabledFunc>('fs.fullscreen.enabled-func')\nexport const FS_FULLSCREEN_IOS_POLL_ENABLED = new InjectionToken<boolean>('fs.fullscreen.ios.poll.enabled')\nexport const FS_FULLSCREEN_IOS_POLL_MS = new InjectionToken<number>('fs.fullscreen.ios.poll.ms')\n","\nimport { isIphone } from './util'\nimport { DOCUMENT, isPlatformServer } from '@angular/common'\nimport { Injectable, Inject, PLATFORM_ID, NgZone } from '@angular/core'\nimport { merge, fromEvent, Observable, throwError, of, interval, BehaviorSubject, EMPTY } from 'rxjs'\nimport {\n  debounceTime, map, startWith, shareReplay, filter, flatMap, tap,\n  distinctUntilChanged, take, takeUntil\n} from 'rxjs/operators'\nimport {\n  FS_FULLSCREEN_REQUEST_EVENTS, FS_FULLSCREEN_EXIT_EVENTS, FS_FULLSCREEN_ELEMENT,\n  FS_FULLSCREEN_CHANGE_EVENTS, FS_FULLSCREEN_ELEMENT_ERROR_EVENTS, FullscreenRequestEvents,\n  FullscreenExitEvents, FullscreenElementKeys, FullscreenChangeEvents, FullscreenErrorEvents,\n  FS_FULLSCREEN_ENABLED, FullscreenEnabledKeys, FS_FULLSCREEN_ENABLED_FUNC, FullscreenEnabledFunc,\n  FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED\n} from './ng-fullscreen.tokens'\n\nconst isKeyTrue =\n  (platformKeys: ReadonlyArray<string>) =>\n    (doc: HTMLDocument | HTMLElement) =>\n      platformKeys.reduce((acc, curr) => acc || doc[curr] ? true : false, false)\n\nconst fullscreenChangeError =\n  (platformKeys: ReadonlyArray<string>) =>\n    (doc: HTMLDocument) =>\n      merge(...platformKeys.map(key => fromEvent(doc, key))).pipe(debounceTime(0))\n\nconst filterAndExecute =\n  (ref: HTMLElement | HTMLDocument) =>\n    (arr: ReadonlyArray<string>) => {\n      const funcStringIdx = arr.findIndex(a => typeof ref[a] === 'function')\n      if (funcStringIdx >= 0) {\n        ref[arr[funcStringIdx]]()\n      }\n    }\n\nexport interface IFloFullscreenService {\n  readonly fullscreen$: Observable<boolean>\n  readonly isFullscreen$: Observable<boolean>\n  readonly isNotFullscreen: Observable<boolean>\n  readonly exitFullscreen: () => void\n  readonly goFullscreen: (elm?: HTMLElement | HTMLDocument) => void\n  readonly canGoFullscreen: (elm?: HTMLElement) => Observable<boolean>\n  readonly fullscreenIsSupported: (elm?: HTMLElement) => Observable<boolean>\n  readonly isFullscreen: (elmOrDoc: HTMLDocument | HTMLElement) => boolean\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FloFullscreenService implements IFloFullscreenService {\n  // tslint:disable: readonly-array\n  constructor(\n    private zone: NgZone,\n    @Inject(DOCUMENT) private doc: any,\n    @Inject(PLATFORM_ID) private platformId: string,\n    @Inject(FS_FULLSCREEN_REQUEST_EVENTS) private requestEventKeys: FullscreenRequestEvents[],\n    @Inject(FS_FULLSCREEN_EXIT_EVENTS) private exitEventKeys: FullscreenExitEvents[],\n    @Inject(FS_FULLSCREEN_ELEMENT) private elementKeys: FullscreenElementKeys[],\n    @Inject(FS_FULLSCREEN_CHANGE_EVENTS) private changeEventKeys: FullscreenChangeEvents[],\n    @Inject(FS_FULLSCREEN_ELEMENT_ERROR_EVENTS) private elementErrorEventKeys: FullscreenErrorEvents[],\n    @Inject(FS_FULLSCREEN_ENABLED) private enabledKeys: FullscreenEnabledKeys[],\n    @Inject(FS_FULLSCREEN_ENABLED_FUNC) private enabledFunc: FullscreenEnabledFunc,\n    @Inject(FS_FULLSCREEN_IOS_POLL_MS) private iosPollrate: number,\n    @Inject(FS_FULLSCREEN_IOS_POLL_ENABLED) private iosPollEnabled: boolean\n  ) { }\n\n  private readonly iOSVideoState = new BehaviorSubject<boolean>(false)\n\n  public readonly isFullscreen = (doc: HTMLDocument | HTMLElement = this.doc) =>\n    isPlatformServer(this.platformId) ? false : isKeyTrue(this.elementKeys)(doc) || this.iOSVideoState.getValue()\n\n  public readonly fullscreenError$ = fullscreenChangeError(this.elementErrorEventKeys)(this.doc).pipe(map(e => throwError(e)))\n\n  private readonly iosVideoBypass = (pasthrough: string[]) => isIphone() ? ['webkitEnterFullscreen'] : pasthrough\n  public readonly extractVideoForIphoneIfRequired = (element: HTMLElement) => isIphone() && !(element instanceof HTMLVideoElement)\n    ? element.querySelector('video') || element\n    : element\n\n  private readonly iosPoller = () => !this.iosPollEnabled\n    ? EMPTY\n    : this.zone.runOutsideAngular(() =>\n      interval(this.iosPollrate).pipe(\n        map(() => Array.from((this.doc as HTMLDocument).querySelectorAll('video'))),\n        flatMap(videoElements => merge(\n          ...videoElements.map(ve => fromEvent(ve, 'webkitbeginfullscreen').pipe(tap(() => this.iOSVideoState.next(true)), take(1))),\n          ...videoElements.map(ve => fromEvent(ve, 'webkitendfullscreen').pipe(tap(() => this.iOSVideoState.next(false)), take(1)))\n        )), takeUntil(this.iOSVideoState)))\n\n  public readonly fullscreen$ = isPlatformServer(this.platformId)\n    ? of(false)\n    : merge(\n      ...this.changeEventKeys.map(key => fromEvent(this.doc, key)),\n      this.fullscreenError$,\n      this.iosPoller()).pipe(\n        debounceTime(0),\n        map(() => this.isFullscreen()),\n        distinctUntilChanged(),\n        startWith(this.isFullscreen()),\n        shareReplay(1))\n\n  public readonly fullscreenIsSupported =\n    (elm?: HTMLElement) =>\n      (isPlatformServer(this.platformId)\n        ? of(false)\n        : isKeyTrue(this.enabledKeys)(this.doc)\n          ? of(true)\n          : !elm\n            ? of(false)\n            : this.enabledFunc(elm)).pipe(shareReplay(1))\n\n  public readonly canGoFullscreen =\n    (elm?: HTMLElement) =>\n      (isPlatformServer(this.platformId)\n        ? of(false)\n        : this.fullscreenIsSupported(elm)\n          .pipe(flatMap(isSupported => !isSupported\n            ? of(false)\n            : this.fullscreen$.pipe(map(isfs => isfs ? false : true))))).pipe(shareReplay(1))\n\n  public readonly isFullscreen$ = this.fullscreen$.pipe(filter(v => v === true))\n  public readonly isNotFullscreen = this.fullscreen$.pipe(filter(v => v === false))\n  public readonly exitFullscreen = () => filterAndExecute(this.doc)(this.exitEventKeys)\n  public readonly goFullscreen = (elm: HTMLElement | HTMLDocument = this.doc.body) =>\n    filterAndExecute(elm)(this.iosVideoBypass(this.requestEventKeys))\n}\n","import {\n  FullscreenRequestEvents, FullscreenExitEvents, FullscreenChangeEvents,\n  FullscreenErrorEvents, FullscreenEnabledKeys, FullscreenElementKeys, FullscreenEnabledFunc\n} from './ng-fullscreen.tokens'\nimport { fromEvent, of } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\n\nexport const DEFAULT_FS_FULLSCREEN_REQUEST_EVENTS: ReadonlyArray<FullscreenRequestEvents> = [\n  'requestFullscreen',\n  'webkitRequestFullscreen',\n  'webkitRequestFullScreen',\n  'mozRequestFullScreen',\n  'msRequestFullscreen'\n]\n\nexport const DEFAULT_FS_FULLSCREEN_EXIT_EVENTS: ReadonlyArray<FullscreenExitEvents> = [\n  'exitFullscreen',\n  'webkitExitFullscreen',\n  'webkitCancelFullScreen',\n  'mozCancelFullScreen',\n  'msExitFullscreen'\n]\n\nexport const DEFAULT_FS_FULLSCREEN_ELEMENT_ERROR_EVENTS: ReadonlyArray<FullscreenErrorEvents> = [\n  'fullscreenerror',\n  'webkitfullscreenerror',\n  'webkitfullscreenerror',\n  'mozfullscreenerror',\n  'MSFullscreenError'\n]\n\nexport const DEFAULT_FS_FULLSCREEN_ELEMENT: ReadonlyArray<FullscreenElementKeys> = [\n  'fullscreenElement',\n  'webkitFullscreenElement',\n  'webkitCurrentFullScreenElement',\n  'mozFullScreenElement',\n  'msFullscreenElement'\n]\n\nexport const DEFAULT_FS_FULLSCREEN_ENABLED: ReadonlyArray<FullscreenEnabledKeys> = [\n  'fullscreenEnabled',\n  'mozFullscreenEnabled',\n  'webkitFullscreenEnabled',\n  'msFullscreenEnabled'\n]\n\nexport const DEFAULT_FS_FULLSCREEN_CHANGE_EVENTS: ReadonlyArray<FullscreenChangeEvents> = [\n  'fullscreenchange',\n  'webkitfullscreenchange',\n  'mozfullscreenchange',\n  'MSFullscreenChange'\n]\n\nexport function DEFAULT_FS_FULLSCREEN_ENABLED_FUNC(): FullscreenEnabledFunc {\n  const lambda = (elm: HTMLElement) => {\n    const _elm = elm instanceof HTMLVideoElement ? elm : elm.querySelector('video')\n    return !_elm ? of(false) : (_elm as any).readyState >= 2\n        ? of(true)\n        : fromEvent(_elm, 'loadedmetadata').pipe(\n          map(evt => !evt.target ? false : (evt.target as any).webkitSupportsFullscreen),\n          take(1))\n  }\n  return lambda\n}\n\nexport const DEFAULT_FS_FULLSCREEN_IOS_POLL_ENABLED = true\nexport const DEFAULT_FS_FULLSCREEN_IOS_POLL_MS = 60\n","import { NgModule, ModuleWithProviders, ChangeDetectorRef } from '@angular/core'\nimport { FloFullscreenService } from './ng-fullscreen.service'\nimport { CommonModule } from '@angular/common'\nimport {\n  FS_FULLSCREEN_REQUEST_EVENTS, FS_FULLSCREEN_EXIT_EVENTS, FS_FULLSCREEN_CHANGE_EVENTS,\n  FS_FULLSCREEN_ELEMENT_ERROR_EVENTS, FS_FULLSCREEN_ELEMENT, FS_FULLSCREEN_ENABLED,\n  FS_FULLSCREEN_ENABLED_FUNC, FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED\n} from './ng-fullscreen.tokens'\nimport {\n  DEFAULT_FS_FULLSCREEN_REQUEST_EVENTS, DEFAULT_FS_FULLSCREEN_EXIT_EVENTS, DEFAULT_FS_FULLSCREEN_CHANGE_EVENTS,\n  DEFAULT_FS_FULLSCREEN_ELEMENT_ERROR_EVENTS, DEFAULT_FS_FULLSCREEN_ELEMENT, DEFAULT_FS_FULLSCREEN_ENABLED,\n  DEFAULT_FS_FULLSCREEN_ENABLED_FUNC,\n  DEFAULT_FS_FULLSCREEN_IOS_POLL_MS,\n  DEFAULT_FS_FULLSCREEN_IOS_POLL_ENABLED\n} from './ng-fullscreen.tokens.defaults'\n\nexport interface FloFullscreenCommonModuleConfig {\n  readonly ios: Partial<FloFullscreenCommonModuleIosPollingConfig>\n}\n\nexport interface FloFullscreenCommonModuleIosPollingConfig {\n  readonly enabled: boolean\n  readonly pollDurationMs: number\n}\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [CommonModule],\n  providers: [\n    FloFullscreenService,\n    { provide: FS_FULLSCREEN_REQUEST_EVENTS, useValue: DEFAULT_FS_FULLSCREEN_REQUEST_EVENTS },\n    { provide: FS_FULLSCREEN_EXIT_EVENTS, useValue: DEFAULT_FS_FULLSCREEN_EXIT_EVENTS },\n    { provide: FS_FULLSCREEN_CHANGE_EVENTS, useValue: DEFAULT_FS_FULLSCREEN_CHANGE_EVENTS },\n    { provide: FS_FULLSCREEN_ELEMENT_ERROR_EVENTS, useValue: DEFAULT_FS_FULLSCREEN_ELEMENT_ERROR_EVENTS },\n    { provide: FS_FULLSCREEN_ELEMENT, useValue: DEFAULT_FS_FULLSCREEN_ELEMENT },\n    { provide: FS_FULLSCREEN_ENABLED, useValue: DEFAULT_FS_FULLSCREEN_ENABLED },\n    { provide: FS_FULLSCREEN_ENABLED_FUNC, useFactory: DEFAULT_FS_FULLSCREEN_ENABLED_FUNC },\n    { provide: FS_FULLSCREEN_IOS_POLL_MS, useValue: DEFAULT_FS_FULLSCREEN_IOS_POLL_MS },\n    { provide: FS_FULLSCREEN_IOS_POLL_ENABLED, useValue: DEFAULT_FS_FULLSCREEN_IOS_POLL_ENABLED }\n  ]\n})\nexport class FloFullscreenCommonModule {\n  static config(config: Partial<FloFullscreenCommonModuleConfig>): ModuleWithProviders {\n    return {\n      ngModule: FloFullscreenCommonModule,\n      providers: [\n        {\n          provide: FS_FULLSCREEN_IOS_POLL_ENABLED,\n          useValue: config.ios && typeof config.ios.enabled === 'boolean' ? config.ios.enabled : DEFAULT_FS_FULLSCREEN_IOS_POLL_ENABLED\n        },\n        {\n          provide: FS_FULLSCREEN_IOS_POLL_MS,\n          useValue: config.ios && typeof config.ios.pollDurationMs === 'number'\n            ? config.ios.pollDurationMs\n            : DEFAULT_FS_FULLSCREEN_IOS_POLL_MS\n        }\n      ]\n    }\n  }\n}\n","import { Directive, HostListener, Input, Inject, ChangeDetectorRef } from '@angular/core'\nimport { FloFullscreenService } from '../common/ng-fullscreen.service'\nimport { take } from 'rxjs/operators'\nimport { DOCUMENT } from '@angular/common'\n\n// tslint:disable: readonly-keyword\n// tslint:disable: no-object-mutation\n\n@Directive({\n  selector: '[floClickToEnterFullscreen]',\n})\nexport class FloClickToEnterFullscreenDirective {\n  constructor(private fs: FloFullscreenService, @Inject(DOCUMENT) private doc: any, private cd: ChangeDetectorRef) { }\n\n  private _element: HTMLElement | HTMLDocument\n\n  @Input()\n  get floClickToEnterFullscreen() {\n    return this._element\n  }\n  set floClickToEnterFullscreen(val: any) {\n    if (val instanceof HTMLElement) {\n      this._element = val\n    } else {\n      this._element = this.doc.body\n    }\n  }\n\n  @HostListener('click', []) click() {\n    this.cd.detectChanges()\n    this.fs.isNotFullscreen.pipe(take(1)).subscribe(_ => {\n      // should check for nested video elements to make iOS dev easier\n      this.fs.goFullscreen(this.fs.extractVideoForIphoneIfRequired(this.floClickToEnterFullscreen))\n    })\n  }\n}\n\n@Directive({\n  selector: '[floClickToExitFullscreen]',\n})\nexport class FloClickToExitFullscreenDirective {\n  constructor(private fs: FloFullscreenService) { }\n\n  @HostListener('click', []) click() {\n    this.fs.exitFullscreen()\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { FloFullscreenCommonModule } from '../common/ng-fullscreen.module'\nimport { FloClickToExitFullscreenDirective, FloClickToEnterFullscreenDirective } from './ng-fullscreen.toggle.directive'\n\n@NgModule({\n  imports: [FloFullscreenCommonModule],\n  declarations: [\n    FloClickToEnterFullscreenDirective,\n    FloClickToExitFullscreenDirective\n  ],\n  exports: [\n    FloClickToEnterFullscreenDirective,\n    FloClickToExitFullscreenDirective\n  ]\n})\nexport class FloFullscreenToggleModule { }\n","import {\n  Directive, TemplateRef, ViewContainerRef, OnInit, OnDestroy,\n  SimpleChanges, OnChanges, ChangeDetectorRef, Inject, NgZone\n} from '@angular/core'\nimport { takeUntil, flatMap, startWith, delay, tap, distinctUntilChanged } from 'rxjs/operators'\nimport { Subject, combineLatest, interval } from 'rxjs'\nimport { FloFullscreenService } from '../common/ng-fullscreen.service'\nimport { isIphone } from '../common/util'\nimport { FS_FULLSCREEN_IOS_POLL_MS, FS_FULLSCREEN_IOS_POLL_ENABLED } from '../common/ng-fullscreen.tokens'\n\n// tslint:disable: readonly-keyword\nexport abstract class FloFullscreenDirective implements OnDestroy, OnInit, OnChanges {\n  constructor(protected tr: TemplateRef<any>, protected vc: ViewContainerRef, protected fs: FloFullscreenService,\n    protected cd: ChangeDetectorRef, @Inject(FS_FULLSCREEN_IOS_POLL_ENABLED) protected iosPollEnabled: boolean,\n    @Inject(FS_FULLSCREEN_IOS_POLL_MS) protected iosPollrate: number,\n    protected zone: NgZone) { }\n\n  protected abstract elmInputKey?: string\n  private readonly elmSource = new Subject<HTMLElement | undefined>()\n\n  protected showWhenFullscreen = false\n  protected readonly ngOnDestroy$ = new Subject()\n  protected readonly elm = () => this.elmInputKey ? this[this.elmInputKey] as HTMLElement : undefined\n  protected readonly elm$ = this.elmSource.asObservable()\n\n  ngOnInit() {\n    combineLatest(\n      this.fs.fullscreen$,\n      this.elm$.pipe(\n        tap(() => this.cd.detectChanges()),\n        startWith(this.elm()),\n        delay(0),\n        flatMap(elm => this.iosPollEnabled && isIphone()\n          ? this.zone.runOutsideAngular(() =>\n            interval(this.iosPollrate).pipe(\n              flatMap(() => this.fs.fullscreenIsSupported(elm)),\n              distinctUntilChanged(),\n              takeUntil(this.ngOnDestroy$)))\n          : this.fs.fullscreenIsSupported(elm)\n        ),\n        takeUntil(this.ngOnDestroy$)\n      )\n    ).pipe(takeUntil(this.ngOnDestroy$)).subscribe(res => {\n      const isFullscreen = res[0]\n      const isSupported = res[1]\n      this.vc.clear()\n      if (this.showWhenFullscreen) { // exit\n        if (isFullscreen) {\n          this.vc.createEmbeddedView(this.tr)\n        }\n      } else if (!isFullscreen) { // enter\n        if (isSupported) {\n          this.vc.createEmbeddedView(this.tr)\n        }\n      }\n      this.cd.detectChanges()\n    })\n  }\n\n  ngOnChanges(sc: SimpleChanges) {\n    if (this.elmInputKey && sc[this.elmInputKey]) {\n      this.elmSource.next(sc[this.elmInputKey].currentValue)\n    }\n  }\n\n  ngOnDestroy() {\n    this.ngOnDestroy$.next()\n    this.ngOnDestroy$.complete()\n  }\n}\n\nconst IF_FS_SELECTOR = 'floIfFullscreen'\n\n@Directive({\n  selector: `[${IF_FS_SELECTOR}]`,\n  inputs: [IF_FS_SELECTOR]\n})\nexport class FloFullscreenOnDirective extends FloFullscreenDirective {\n  constructor(protected tr: TemplateRef<any>, protected vc: ViewContainerRef, protected fs: FloFullscreenService,\n    protected cd: ChangeDetectorRef, @Inject(FS_FULLSCREEN_IOS_POLL_ENABLED) protected iosPollEnabled: boolean,\n    @Inject(FS_FULLSCREEN_IOS_POLL_MS) protected iosPollrate: number, protected zone: NgZone) {\n    super(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone)\n    this.showWhenFullscreen = true\n  }\n\n  elmInputKey = IF_FS_SELECTOR\n}\n\nconst IF_NOT_FS_SELECTOR = 'floIfNotFullscreen'\n\n@Directive({\n  selector: `[${IF_NOT_FS_SELECTOR}]`,\n  inputs: [IF_NOT_FS_SELECTOR]\n})\nexport class FloFullscreenOffDirective extends FloFullscreenDirective {\n  constructor(protected tr: TemplateRef<any>, protected vc: ViewContainerRef, protected fs: FloFullscreenService,\n    protected cd: ChangeDetectorRef, @Inject(FS_FULLSCREEN_IOS_POLL_ENABLED) protected iosPollEnabled: boolean,\n    @Inject(FS_FULLSCREEN_IOS_POLL_MS) protected iosPollrate: number, protected zone: NgZone) {\n    super(tr, vc, fs, cd, iosPollEnabled, iosPollrate, zone)\n    this.showWhenFullscreen = false\n  }\n\n  elmInputKey = IF_NOT_FS_SELECTOR\n}\n","import { NgModule } from '@angular/core'\nimport { FloFullscreenCommonModule } from '../common/ng-fullscreen.module'\nimport { FloFullscreenOnDirective, FloFullscreenOffDirective } from './ng-fullscreen.switch.directive'\n\n@NgModule({\n  imports: [FloFullscreenCommonModule],\n  declarations: [\n    FloFullscreenOnDirective,\n    FloFullscreenOffDirective\n  ],\n  exports: [\n    FloFullscreenOnDirective,\n    FloFullscreenOffDirective\n  ]\n})\nexport class FloFullscreenSwitchModule { }\n","import { NgModule } from '@angular/core'\nimport { FloFullscreenCommonModule } from './common/ng-fullscreen.module'\nimport { FloFullscreenToggleModule } from './toggle/ng-fullscreen.toggle.module'\nimport { FloFullscreenSwitchModule } from './switch/ng-fullscreen.switch.module'\n\n@NgModule({\n  imports: [\n    FloFullscreenCommonModule,\n    FloFullscreenSwitchModule,\n    FloFullscreenToggleModule\n  ],\n  exports: [\n    FloFullscreenCommonModule,\n    FloFullscreenSwitchModule,\n    FloFullscreenToggleModule\n  ]\n})\nexport class FloFullscreenModule { }\n"],"names":[],"mappings":"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"}