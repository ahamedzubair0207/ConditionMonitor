/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { AtlasPopupDirective } from '../directives/atlas-popup.directive';
import { LoadMapService } from '../utils/load-map.service';
export class AtlasMapComponent {
    /**
     * @param {?} mapService
     */
    constructor(mapService) {
        this.mapService = mapService;
        this.onMapClick = new EventEmitter();
        this.loaded = new EventEmitter();
        this.customPins = [];
        this.features = [];
        this.pointsArray = [];
        this.cssArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.popupAtlas = new atlas.Popup();
        this.mapService.loadedComponenet.next(true);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.createMap(this._id, this.initialConfig); // Initial map
        this.startMapClickListener(); // Start emitter
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.emitLoaded();
    }
    /**
     * @return {?}
     */
    emitLoaded() {
        if (this.map) {
            this.loaded.emit();
        }
        else {
            setTimeout(this.emitLoaded, 100);
        }
    }
    /**
     * @param {?} id
     * @param {?} config
     * @return {?}
     */
    createMap(id, config) {
        try {
            this.mapWrapper.nativeElement.setAttribute('id', id);
            this.map = new atlas.Map(id, config); // Init map box
            console.log('Map was created!', this.map);
        }
        catch (e) {
            console.log('CHECK YOUR CONFIG!', e);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    changeMapCamera(options) {
        this.map.setCamera(options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    changeMapStyle(options) {
        this.map.setStyle(options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    changeUserInteraction(options) {
        this.map.setUserInteraction(options);
    }
    /**
     * Founding all unique layers from features Array
     * @param {?} features
     * @return {?} string[]
     */
    findUniqueLayers(features) {
        /** @type {?} */
        const allLayers = features.map(it => it.layer);
        return Array.from(new Set(allLayers));
    }
    /**
     * @return {?}
     */
    startMapClickListener() {
        this.map.addEventListener('click', (e) => {
            this.onMapClick.emit(e.position);
            // On click you emit geo position
        });
    }
    /**
     * Creating popUpContainer and injected to parent Template
     * @param {?} context
     * @return {?}
     */
    createComponent(context) {
        if (this.popupView) {
            this.popupView.destroy();
        }
        this.popupView = this.popupsContainer.createEmbeddedView(this.popupTemplate, context);
    }
    /**
     * @param {?} id
     * @param {?} loc
     * @param {?} clas
     * @return {?}
     */
    addItem(id, loc, clas) {
        /** @type {?} */
        let customHTML;
        /** @type {?} */
        const idItem = clas + id;
        /** @type {?} */
        const pos = new atlas.data.Position(loc.lnt, loc.lng);
        this.cssArray.push(idItem); // Saving existing HTML elements
        customHTML = document.createElement('div');
        customHTML.setAttribute('id', idItem);
        customHTML.setAttribute('class', clas);
        this.map.addHtml(customHTML, pos); // add to map
    }
    /**
     * Drawin point on the map as pins
     * \@Incjet createPopups()
     * @param {?} features
     * @return {?}
     */
    createPoints(features) {
        if (features.length === 0) {
            console.log('No data available');
            return;
        }
        for (const item of features) {
            this.map.addPins([item.atlasFeature], item.pinConfig);
            if (item.atlasFeature.properties.cssClass) {
                this.addItem(item.dataElement.id, item.dataElement.localization, item.atlasFeature.properties.cssClass);
                this.customPins.push(item.atlasFeature.properties.cssClass);
            }
            this.pointsArray.push(item.atlasFeature);
        }
        this.createPopups(features);
    }
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param {?} features
     * @return {?}
     */
    createPopups(features) {
        for (const item of this.findUniqueLayers(features)) {
            if (this.popupTemplate) {
                this.map.addEventListener('mouseover', item, (e) => {
                    /** @type {?} */
                    const amFeature = features.find(it => it.dataElement.name === e.features[0].properties.name);
                    this.createComponent({
                        /**
                                     * sent to template variable
                                     * raw data from input
                                     */
                        dataElement: amFeature.dataElement
                    });
                    this.popupAtlas.setPopupOptions({
                        position: e.features[0].geometry.coordinates,
                        content: document.getElementById(`popupWrapper`),
                    });
                    this.popupAtlas.open(this.map);
                });
            }
        }
    }
    /**
     * @param {?} features
     * @return {?}
     */
    updatePoints(features) {
        this.map.removeLayers(this.findUniqueLayers(features));
        if (this.cssArray.length) {
            this.cssArray.forEach(value => {
                (/** @type {?} */ (document.querySelectorAll(`#${value}`))).forEach(it => it.remove());
                this.map.removeHtml(value);
            });
            this.cssArray = [];
        }
        this.createPoints(features);
    }
    /**
     * @return {?}
     */
    removeMap() {
        this.map.remove();
    }
}
AtlasMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'am-map',
                template: `<div #mapWrapper class="atlas-map"></div>

<div id="popupWrapper">
  <div #popupsContainer>
  </div>
</div>




`,
                styles: [`.atlas-map{position:relative;width:100%;height:100%}`]
            },] },
];
/** @nocollapse */
AtlasMapComponent.ctorParameters = () => [
    { type: LoadMapService }
];
AtlasMapComponent.propDecorators = {
    initialConfig: [{ type: Input }],
    _id: [{ type: Input }],
    onMapClick: [{ type: Output }],
    loaded: [{ type: Output }],
    popupsContainer: [{ type: ViewChild, args: ['popupsContainer', { read: ViewContainerRef },] }],
    mapWrapper: [{ type: ViewChild, args: ['mapWrapper', { read: ElementRef },] }],
    popupTemplate: [{ type: ContentChild, args: [AtlasPopupDirective, { read: TemplateRef },] }]
};
if (false) {
    /** @type {?} */
    AtlasMapComponent.prototype.initialConfig;
    /** @type {?} */
    AtlasMapComponent.prototype._id;
    /** @type {?} */
    AtlasMapComponent.prototype.onMapClick;
    /** @type {?} */
    AtlasMapComponent.prototype.loaded;
    /** @type {?} */
    AtlasMapComponent.prototype.popupsContainer;
    /** @type {?} */
    AtlasMapComponent.prototype.mapWrapper;
    /**
     * For create and control popup
     * To Inject into ng-template in parent
     * @type {?}
     */
    AtlasMapComponent.prototype.popupTemplate;
    /** @type {?} */
    AtlasMapComponent.prototype.popupView;
    /** @type {?} */
    AtlasMapComponent.prototype.popupAtlas;
    /** @type {?} */
    AtlasMapComponent.prototype.map;
    /** @type {?} */
    AtlasMapComponent.prototype.customPins;
    /** @type {?} */
    AtlasMapComponent.prototype.features;
    /** @type {?} */
    AtlasMapComponent.prototype.pointsArray;
    /** @type {?} */
    AtlasMapComponent.prototype.cssArray;
    /** @type {?} */
    AtlasMapComponent.prototype.mapService;
}

//# sourceMappingURL=data:application/json;base64,