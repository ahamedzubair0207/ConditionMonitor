/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Source() { }
/** @type {?} */
Source.prototype.type;
/** @type {?} */
Source.prototype.src;
/** @type {?} */
const sources = [
    {
        type: 'style',
        src: 'https://atlas.microsoft.com/sdk/css/atlas.min.css?api-version=1'
    },
    {
        type: 'script',
        src: 'https://atlas.microsoft.com/sdk/js/atlas.min.js?api-version=1'
    }
];
/**
 * @return {?}
 */
export function _window() {
    return window;
}
/** @typedef {?} */
var AssetType;
export { AssetType };
/**
 * @param {?} source
 * @param {?} type
 * @return {?}
 */
export function loadSingleAsset(source, type) {
    return new Promise((resolve, reject) => {
        /** @type {?} */
        let createdElement;
        switch (type) {
            case 'script':
                createdElement = document.createElement('script');
                createdElement.src = source;
                break;
            case 'style':
                createdElement = document.createElement('link');
                createdElement.rel = 'stylesheet';
                createdElement.href = source;
                createdElement.type = 'text/css';
                break;
            default:
                reject('Wrong Type');
                break;
        }
        if (typeof (_window().atlas) !== 'undefined'
            && typeof (_window().atlas.Map) !== 'undefined') {
            resolve();
        }
        else {
            createdElement.onerror = reject;
            createdElement.onload = resolve;
            document.head.appendChild(createdElement);
        }
    });
}
/**
 * @return {?}
 */
export function azureMapLazyLoader() {
    return Promise.all(sources.map(source => loadSingleAsset(source.src, source.type)));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmUtbWFwLWxhenktbG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFjYWlzb2Z0L2FuZ3VsYXItYXp1cmUtbWFwcy8iLCJzb3VyY2VzIjpbInNyYy9henVyZS1tYXAvdXRpbHMvYXp1cmUtbWFwLWxhenktbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFLQSxNQUFNLE9BQU8sR0FBYTtJQUN0QjtRQUNJLElBQUksRUFBRSxPQUFPO1FBQ2IsR0FBRyxFQUFFLGlFQUFpRTtLQUN6RTtJQUNEO1FBQ0ksSUFBSSxFQUFFLFFBQVE7UUFDZCxHQUFHLEVBQUUsK0RBQStEO0tBQ3ZFO0NBQ0osQ0FBQzs7OztBQUVGLE1BQU07SUFDRixPQUFPLE1BQU0sQ0FBQztDQUNqQjs7Ozs7Ozs7O0FBSUQsTUFBTSwwQkFBMEIsTUFBYyxFQUFFLElBQWU7SUFDM0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTs7UUFDbkMsSUFBSSxjQUFjLENBQUM7UUFDbkIsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLFFBQVE7Z0JBQ1QsY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2xELGNBQWMsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO2dCQUM1QixNQUFNO1lBQ1YsS0FBSyxPQUFPO2dCQUNSLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNoRCxjQUFjLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztnQkFDbEMsY0FBYyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7Z0JBQzdCLGNBQWMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO2dCQUNqQyxNQUFNO1lBQ1Y7Z0JBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNyQixNQUFNO1NBQ2I7UUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXO2VBQ3JDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQ2pELE9BQU8sRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNMLGNBQWMsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ2hDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1lBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzNDO0tBRUosQ0FBQyxDQUFDO0NBQ047Ozs7QUFFRCxNQUFNO0lBQ0YsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZGIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIFNvdXJjZSB7XG4gIHR5cGU6IEFzc2V0VHlwZTtcbiAgc3JjOiBzdHJpbmc7XG59XG5cbmNvbnN0IHNvdXJjZXM6IFNvdXJjZVtdID0gW1xuICAgIHtcbiAgICAgICAgdHlwZTogJ3N0eWxlJyxcbiAgICAgICAgc3JjOiAnaHR0cHM6Ly9hdGxhcy5taWNyb3NvZnQuY29tL3Nkay9jc3MvYXRsYXMubWluLmNzcz9hcGktdmVyc2lvbj0xJ1xuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnc2NyaXB0JyxcbiAgICAgICAgc3JjOiAnaHR0cHM6Ly9hdGxhcy5taWNyb3NvZnQuY29tL3Nkay9qcy9hdGxhcy5taW4uanM/YXBpLXZlcnNpb249MSdcbiAgICB9XG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gX3dpbmRvdygpOiBhbnkge1xuICAgIHJldHVybiB3aW5kb3c7XG59XG5cbmV4cG9ydCB0eXBlIEFzc2V0VHlwZSA9ICdzY3JpcHQnIHwgJ3N0eWxlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTaW5nbGVBc3NldChzb3VyY2U6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IGNyZWF0ZWRFbGVtZW50O1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NjcmlwdCc6XG4gICAgICAgICAgICAgICAgY3JlYXRlZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgICAgICBjcmVhdGVkRWxlbWVudC5zcmMgPSBzb3VyY2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdHlsZSc6XG4gICAgICAgICAgICAgICAgY3JlYXRlZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgICAgICAgICAgY3JlYXRlZEVsZW1lbnQucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICAgICAgICAgIGNyZWF0ZWRFbGVtZW50LmhyZWYgPSBzb3VyY2U7XG4gICAgICAgICAgICAgICAgY3JlYXRlZEVsZW1lbnQudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlamVjdCgnV3JvbmcgVHlwZScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKF93aW5kb3coKS5hdGxhcykgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAmJiB0eXBlb2YgKF93aW5kb3coKS5hdGxhcy5NYXApICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNyZWF0ZWRFbGVtZW50Lm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgY3JlYXRlZEVsZW1lbnQub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGNyZWF0ZWRFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhenVyZU1hcExhenlMb2FkZXIoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHNvdXJjZXMubWFwKHNvdXJjZSA9PiBsb2FkU2luZ2xlQXNzZXQoc291cmNlLnNyYywgc291cmNlLnR5cGUpKSk7XG59XG4iXX0=