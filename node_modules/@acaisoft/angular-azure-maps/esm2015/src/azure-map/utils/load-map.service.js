/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { azureMapLazyLoader } from './azure-map-lazy-loader';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { fromPromise } from 'rxjs/internal-compatibility';
export class LoadMapService {
    constructor() {
        this.isLoaded = false;
        this.isComponentLoaded = false;
        this.loadedSubject = new Subject();
        this.loadedComponenet = new BehaviorSubject(false);
    }
    /**
     * @return {?}
     */
    load() {
        if (!this.isLoaded) {
            return fromPromise(azureMapLazyLoader().then(() => {
                this.isLoaded = true;
                return this.isLoaded;
            }));
        }
        else {
            return of(true);
        }
    }
    /**
     * @return {?}
     */
    observableComponent() {
        return this.loadedSubject.asObservable();
    }
}
LoadMapService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LoadMapService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    LoadMapService.prototype.isLoaded;
    /** @type {?} */
    LoadMapService.prototype.isComponentLoaded;
    /** @type {?} */
    LoadMapService.prototype.loadedSubject;
    /** @type {?} */
    LoadMapService.prototype.loadedComponenet;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1tYXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhY2Fpc29mdC9hbmd1bGFyLWF6dXJlLW1hcHMvIiwic291cmNlcyI6WyJzcmMvYXp1cmUtbWFwL3V0aWxzL2xvYWQtbWFwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGVBQWUsRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzlELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUl4RCxNQUFNO0lBWUo7d0JBVGtCLEtBQUs7aUNBRUksS0FBSzs2QkFJaEIsSUFBSSxPQUFPLEVBQVc7Z0NBQ25CLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQztLQUc1Qzs7OztJQUdELElBQUk7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDdEIsQ0FBQyxDQUFDLENBQUM7U0FDTDthQUFNO1lBQ0wsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7S0FDRjs7OztJQUVELG1CQUFtQjtRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDMUM7OztZQTlCRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7YXp1cmVNYXBMYXp5TG9hZGVyfSBmcm9tICcuL2F6dXJlLW1hcC1sYXp5LWxvYWRlcic7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmcm9tUHJvbWlzZX0gZnJvbSAncnhqcy9pbnRlcm5hbC1jb21wYXRpYmlsaXR5JztcbmltcG9ydCB7Yn0gZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvcmVuZGVyMyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2FkTWFwU2VydmljZSB7XG5cblxuICBwdWJsaWMgaXNMb2FkZWQgPSBmYWxzZTtcblxuICBwdWJsaWMgaXNDb21wb25lbnRMb2FkZWQgPSBmYWxzZVxuXG5cblxuICBsb2FkZWRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgbG9hZGVkQ29tcG9uZW5ldCA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuXG4gIGxvYWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm4gZnJvbVByb21pc2UoYXp1cmVNYXBMYXp5TG9hZGVyKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0xvYWRlZDtcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9mKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIG9ic2VydmFibGVDb21wb25lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVkU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19