import { AfterContentInit, AfterViewInit, ElementRef, EmbeddedViewRef, EventEmitter, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { AmFeature } from '../interfaces/am-feature';
import { LoadMapService } from '../utils/load-map.service';
export declare class AtlasMapComponent implements OnInit, AfterContentInit, AfterViewInit {
    private mapService;
    initialConfig: any;
    _id: string;
    onMapClick: EventEmitter<atlas.data.Position>;
    loaded: EventEmitter<any>;
    popupsContainer: ViewContainerRef;
    mapWrapper: ElementRef;
    /**
     * For create and control popup
     * To Inject into ng-template in parent
     */
    popupTemplate: TemplateRef<any>;
    popupView: EmbeddedViewRef<any>;
    popupAtlas: atlas.Popup;
    map: atlas.Map;
    private customPins;
    features: AmFeature[];
    private pointsArray;
    private cssArray;
    constructor(mapService: LoadMapService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    emitLoaded(): void;
    createMap(id: string, config: any): void;
    changeMapCamera(options: CameraOptions & AnimationOptions): void;
    changeMapStyle(options: StyleOptions): void;
    changeUserInteraction(options: UserInteractionOptions): void;
    /**
     * Founding all unique layers from features Array
     * @param AmFeature[] features
     * @returns string[]
     */
    findUniqueLayers(features: AmFeature[]): string[];
    startMapClickListener(): void;
    /**
     * Creating popUpContainer and injected to parent Template
     * @param context
     */
    createComponent(context: any): void;
    addItem(id: any, loc: any, clas: any): void;
    /**
     * Drawin point on the map as pins
     * @Incjet createPopups()
     * @param  features
     */
    createPoints(features: AmFeature[]): void;
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param features
     */
    createPopups(features: AmFeature[]): void;
    updatePoints(features: AmFeature[]): void;
    removeMap(): void;
}
