import { Directive, Injectable, Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewContainerRef, NgModule } from '@angular/core';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { fromPromise } from 'rxjs/internal-compatibility';
import { __values } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AtlasPopupDirective = /** @class */ (function () {
    function AtlasPopupDirective() {
    }
    AtlasPopupDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[amPopup]'
                },] },
    ];
    /** @nocollapse */
    AtlasPopupDirective.ctorParameters = function () { return []; };
    return AtlasPopupDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var sources = [
    {
        type: 'style',
        src: 'https://atlas.microsoft.com/sdk/css/atlas.min.css?api-version=1'
    },
    {
        type: 'script',
        src: 'https://atlas.microsoft.com/sdk/js/atlas.min.js?api-version=1'
    }
];
/**
 * @return {?}
 */
function _window() {
    return window;
}
/**
 * @param {?} source
 * @param {?} type
 * @return {?}
 */
function loadSingleAsset(source, type) {
    return new Promise(function (resolve, reject) {
        /** @type {?} */
        var createdElement;
        switch (type) {
            case 'script':
                createdElement = document.createElement('script');
                createdElement.src = source;
                break;
            case 'style':
                createdElement = document.createElement('link');
                createdElement.rel = 'stylesheet';
                createdElement.href = source;
                createdElement.type = 'text/css';
                break;
            default:
                reject('Wrong Type');
                break;
        }
        if (typeof (_window().atlas) !== 'undefined'
            && typeof (_window().atlas.Map) !== 'undefined') {
            resolve();
        }
        else {
            createdElement.onerror = reject;
            createdElement.onload = resolve;
            document.head.appendChild(createdElement);
        }
    });
}
/**
 * @return {?}
 */
function azureMapLazyLoader() {
    return Promise.all(sources.map(function (source) { return loadSingleAsset(source.src, source.type); }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LoadMapService = /** @class */ (function () {
    function LoadMapService() {
        this.isLoaded = false;
        this.isComponentLoaded = false;
        this.loadedSubject = new Subject();
        this.loadedComponenet = new BehaviorSubject(false);
    }
    /**
     * @return {?}
     */
    LoadMapService.prototype.load = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isLoaded) {
            return fromPromise(azureMapLazyLoader().then(function () {
                _this.isLoaded = true;
                return _this.isLoaded;
            }));
        }
        else {
            return of(true);
        }
    };
    /**
     * @return {?}
     */
    LoadMapService.prototype.observableComponent = /**
     * @return {?}
     */
    function () {
        return this.loadedSubject.asObservable();
    };
    LoadMapService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LoadMapService.ctorParameters = function () { return []; };
    return LoadMapService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AtlasMapComponent = /** @class */ (function () {
    function AtlasMapComponent(mapService) {
        this.mapService = mapService;
        this.onMapClick = new EventEmitter();
        this.loaded = new EventEmitter();
        this.customPins = [];
        this.features = [];
        this.pointsArray = [];
        this.cssArray = [];
    }
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.popupAtlas = new atlas.Popup();
        this.mapService.loadedComponenet.next(true);
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.createMap(this._id, this.initialConfig); // Initial map
        this.startMapClickListener(); // Start emitter
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.emitLoaded();
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.emitLoaded = /**
     * @return {?}
     */
    function () {
        if (this.map) {
            this.loaded.emit();
        }
        else {
            setTimeout(this.emitLoaded, 100);
        }
    };
    /**
     * @param {?} id
     * @param {?} config
     * @return {?}
     */
    AtlasMapComponent.prototype.createMap = /**
     * @param {?} id
     * @param {?} config
     * @return {?}
     */
    function (id, config) {
        try {
            this.mapWrapper.nativeElement.setAttribute('id', id);
            this.map = new atlas.Map(id, config); // Init map box
            console.log('Map was created!', this.map);
        }
        catch (e) {
            console.log('CHECK YOUR CONFIG!', e);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AtlasMapComponent.prototype.changeMapCamera = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.map.setCamera(options);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AtlasMapComponent.prototype.changeMapStyle = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.map.setStyle(options);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AtlasMapComponent.prototype.changeUserInteraction = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.map.setUserInteraction(options);
    };
    /**
     * Founding all unique layers from features Array
     * @param AmFeature[] features
     * @returns string[]
     */
    /**
     * Founding all unique layers from features Array
     * @param {?} features
     * @return {?} string[]
     */
    AtlasMapComponent.prototype.findUniqueLayers = /**
     * Founding all unique layers from features Array
     * @param {?} features
     * @return {?} string[]
     */
    function (features) {
        /** @type {?} */
        var allLayers = features.map(function (it) { return it.layer; });
        return Array.from(new Set(allLayers));
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.startMapClickListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.map.addEventListener('click', function (e) {
            _this.onMapClick.emit(e.position);
            // On click you emit geo position
        });
    };
    /**
     * Creating popUpContainer and injected to parent Template
     * @param context
     */
    /**
     * Creating popUpContainer and injected to parent Template
     * @param {?} context
     * @return {?}
     */
    AtlasMapComponent.prototype.createComponent = /**
     * Creating popUpContainer and injected to parent Template
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (this.popupView) {
            this.popupView.destroy();
        }
        this.popupView = this.popupsContainer.createEmbeddedView(this.popupTemplate, context);
    };
    /**
     * @param {?} id
     * @param {?} loc
     * @param {?} clas
     * @return {?}
     */
    AtlasMapComponent.prototype.addItem = /**
     * @param {?} id
     * @param {?} loc
     * @param {?} clas
     * @return {?}
     */
    function (id, loc, clas) {
        /** @type {?} */
        var customHTML;
        /** @type {?} */
        var idItem = clas + id;
        /** @type {?} */
        var pos = new atlas.data.Position(loc.lnt, loc.lng);
        this.cssArray.push(idItem); // Saving existing HTML elements
        customHTML = document.createElement('div');
        customHTML.setAttribute('id', idItem);
        customHTML.setAttribute('class', clas);
        this.map.addHtml(customHTML, pos); // add to map
    };
    /**
     * Drawin point on the map as pins
     * @Incjet createPopups()
     * @param  features
     */
    /**
     * Drawin point on the map as pins
     * \@Incjet createPopups()
     * @param {?} features
     * @return {?}
     */
    AtlasMapComponent.prototype.createPoints = /**
     * Drawin point on the map as pins
     * \@Incjet createPopups()
     * @param {?} features
     * @return {?}
     */
    function (features) {
        var e_1, _a;
        if (features.length === 0) {
            console.log('No data available');
            return;
        }
        try {
            for (var features_1 = __values(features), features_1_1 = features_1.next(); !features_1_1.done; features_1_1 = features_1.next()) {
                var item = features_1_1.value;
                this.map.addPins([item.atlasFeature], item.pinConfig);
                if (item.atlasFeature.properties.cssClass) {
                    this.addItem(item.dataElement.id, item.dataElement.localization, item.atlasFeature.properties.cssClass);
                    this.customPins.push(item.atlasFeature.properties.cssClass);
                }
                this.pointsArray.push(item.atlasFeature);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (features_1_1 && !features_1_1.done && (_a = features_1.return)) _a.call(features_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.createPopups(features);
    };
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param features
     */
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param {?} features
     * @return {?}
     */
    AtlasMapComponent.prototype.createPopups = /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param {?} features
     * @return {?}
     */
    function (features) {
        var _this = this;
        var e_2, _a;
        try {
            for (var _b = __values(this.findUniqueLayers(features)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (this.popupTemplate) {
                    this.map.addEventListener('mouseover', item, function (e) {
                        /** @type {?} */
                        var amFeature = features.find(function (it) { return it.dataElement.name === e.features[0].properties.name; });
                        _this.createComponent({
                            /**
                                         * sent to template variable
                                         * raw data from input
                                         */
                            dataElement: amFeature.dataElement
                        });
                        _this.popupAtlas.setPopupOptions({
                            position: e.features[0].geometry.coordinates,
                            content: document.getElementById("popupWrapper"),
                        });
                        _this.popupAtlas.open(_this.map);
                    });
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @param {?} features
     * @return {?}
     */
    AtlasMapComponent.prototype.updatePoints = /**
     * @param {?} features
     * @return {?}
     */
    function (features) {
        var _this = this;
        this.map.removeLayers(this.findUniqueLayers(features));
        if (this.cssArray.length) {
            this.cssArray.forEach(function (value) {
                (/** @type {?} */ (document.querySelectorAll("#" + value))).forEach(function (it) { return it.remove(); });
                _this.map.removeHtml(value);
            });
            this.cssArray = [];
        }
        this.createPoints(features);
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.removeMap = /**
     * @return {?}
     */
    function () {
        this.map.remove();
    };
    AtlasMapComponent.decorators = [
        { type: Component, args: [{
                    selector: 'am-map',
                    template: "<div #mapWrapper class=\"atlas-map\"></div>\n\n<div id=\"popupWrapper\">\n  <div #popupsContainer>\n  </div>\n</div>\n\n\n\n\n",
                    styles: [".atlas-map{position:relative;width:100%;height:100%}"]
                },] },
    ];
    /** @nocollapse */
    AtlasMapComponent.ctorParameters = function () { return [
        { type: LoadMapService }
    ]; };
    AtlasMapComponent.propDecorators = {
        initialConfig: [{ type: Input }],
        _id: [{ type: Input }],
        onMapClick: [{ type: Output }],
        loaded: [{ type: Output }],
        popupsContainer: [{ type: ViewChild, args: ['popupsContainer', { read: ViewContainerRef },] }],
        mapWrapper: [{ type: ViewChild, args: ['mapWrapper', { read: ElementRef },] }],
        popupTemplate: [{ type: ContentChild, args: [AtlasPopupDirective, { read: TemplateRef },] }]
    };
    return AtlasMapComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AmModule = /** @class */ (function () {
    function AmModule() {
    }
    /**
     * @return {?}
     */
    AmModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AmModule,
            providers: [
                LoadMapService
            ]
        };
    };
    AmModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    declarations: [AtlasMapComponent, AtlasPopupDirective],
                    exports: [
                        AtlasMapComponent,
                        AtlasPopupDirective,
                    ],
                    bootstrap: [AtlasMapComponent]
                },] },
    ];
    return AmModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { AmModule, AtlasMapComponent, LoadMapService, AtlasPopupDirective as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,