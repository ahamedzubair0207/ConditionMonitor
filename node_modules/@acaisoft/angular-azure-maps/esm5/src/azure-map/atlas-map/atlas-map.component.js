/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { AtlasPopupDirective } from '../directives/atlas-popup.directive';
import { LoadMapService } from '../utils/load-map.service';
var AtlasMapComponent = /** @class */ (function () {
    function AtlasMapComponent(mapService) {
        this.mapService = mapService;
        this.onMapClick = new EventEmitter();
        this.loaded = new EventEmitter();
        this.customPins = [];
        this.features = [];
        this.pointsArray = [];
        this.cssArray = [];
    }
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.popupAtlas = new atlas.Popup();
        this.mapService.loadedComponenet.next(true);
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.createMap(this._id, this.initialConfig); // Initial map
        this.startMapClickListener(); // Start emitter
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.emitLoaded();
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.emitLoaded = /**
     * @return {?}
     */
    function () {
        if (this.map) {
            this.loaded.emit();
        }
        else {
            setTimeout(this.emitLoaded, 100);
        }
    };
    /**
     * @param {?} id
     * @param {?} config
     * @return {?}
     */
    AtlasMapComponent.prototype.createMap = /**
     * @param {?} id
     * @param {?} config
     * @return {?}
     */
    function (id, config) {
        try {
            this.mapWrapper.nativeElement.setAttribute('id', id);
            this.map = new atlas.Map(id, config); // Init map box
            console.log('Map was created!', this.map);
        }
        catch (e) {
            console.log('CHECK YOUR CONFIG!', e);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AtlasMapComponent.prototype.changeMapCamera = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.map.setCamera(options);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AtlasMapComponent.prototype.changeMapStyle = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.map.setStyle(options);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AtlasMapComponent.prototype.changeUserInteraction = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.map.setUserInteraction(options);
    };
    /**
     * Founding all unique layers from features Array
     * @param AmFeature[] features
     * @returns string[]
     */
    /**
     * Founding all unique layers from features Array
     * @param {?} features
     * @return {?} string[]
     */
    AtlasMapComponent.prototype.findUniqueLayers = /**
     * Founding all unique layers from features Array
     * @param {?} features
     * @return {?} string[]
     */
    function (features) {
        /** @type {?} */
        var allLayers = features.map(function (it) { return it.layer; });
        return Array.from(new Set(allLayers));
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.startMapClickListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.map.addEventListener('click', function (e) {
            _this.onMapClick.emit(e.position);
            // On click you emit geo position
        });
    };
    /**
     * Creating popUpContainer and injected to parent Template
     * @param context
     */
    /**
     * Creating popUpContainer and injected to parent Template
     * @param {?} context
     * @return {?}
     */
    AtlasMapComponent.prototype.createComponent = /**
     * Creating popUpContainer and injected to parent Template
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (this.popupView) {
            this.popupView.destroy();
        }
        this.popupView = this.popupsContainer.createEmbeddedView(this.popupTemplate, context);
    };
    /**
     * @param {?} id
     * @param {?} loc
     * @param {?} clas
     * @return {?}
     */
    AtlasMapComponent.prototype.addItem = /**
     * @param {?} id
     * @param {?} loc
     * @param {?} clas
     * @return {?}
     */
    function (id, loc, clas) {
        /** @type {?} */
        var customHTML;
        /** @type {?} */
        var idItem = clas + id;
        /** @type {?} */
        var pos = new atlas.data.Position(loc.lnt, loc.lng);
        this.cssArray.push(idItem); // Saving existing HTML elements
        customHTML = document.createElement('div');
        customHTML.setAttribute('id', idItem);
        customHTML.setAttribute('class', clas);
        this.map.addHtml(customHTML, pos); // add to map
    };
    /**
     * Drawin point on the map as pins
     * @Incjet createPopups()
     * @param  features
     */
    /**
     * Drawin point on the map as pins
     * \@Incjet createPopups()
     * @param {?} features
     * @return {?}
     */
    AtlasMapComponent.prototype.createPoints = /**
     * Drawin point on the map as pins
     * \@Incjet createPopups()
     * @param {?} features
     * @return {?}
     */
    function (features) {
        var e_1, _a;
        if (features.length === 0) {
            console.log('No data available');
            return;
        }
        try {
            for (var features_1 = tslib_1.__values(features), features_1_1 = features_1.next(); !features_1_1.done; features_1_1 = features_1.next()) {
                var item = features_1_1.value;
                this.map.addPins([item.atlasFeature], item.pinConfig);
                if (item.atlasFeature.properties.cssClass) {
                    this.addItem(item.dataElement.id, item.dataElement.localization, item.atlasFeature.properties.cssClass);
                    this.customPins.push(item.atlasFeature.properties.cssClass);
                }
                this.pointsArray.push(item.atlasFeature);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (features_1_1 && !features_1_1.done && (_a = features_1.return)) _a.call(features_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.createPopups(features);
    };
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param features
     */
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param {?} features
     * @return {?}
     */
    AtlasMapComponent.prototype.createPopups = /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param {?} features
     * @return {?}
     */
    function (features) {
        var _this = this;
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.findUniqueLayers(features)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (this.popupTemplate) {
                    this.map.addEventListener('mouseover', item, function (e) {
                        /** @type {?} */
                        var amFeature = features.find(function (it) { return it.dataElement.name === e.features[0].properties.name; });
                        _this.createComponent({
                            /**
                                         * sent to template variable
                                         * raw data from input
                                         */
                            dataElement: amFeature.dataElement
                        });
                        _this.popupAtlas.setPopupOptions({
                            position: e.features[0].geometry.coordinates,
                            content: document.getElementById("popupWrapper"),
                        });
                        _this.popupAtlas.open(_this.map);
                    });
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @param {?} features
     * @return {?}
     */
    AtlasMapComponent.prototype.updatePoints = /**
     * @param {?} features
     * @return {?}
     */
    function (features) {
        var _this = this;
        this.map.removeLayers(this.findUniqueLayers(features));
        if (this.cssArray.length) {
            this.cssArray.forEach(function (value) {
                (/** @type {?} */ (document.querySelectorAll("#" + value))).forEach(function (it) { return it.remove(); });
                _this.map.removeHtml(value);
            });
            this.cssArray = [];
        }
        this.createPoints(features);
    };
    /**
     * @return {?}
     */
    AtlasMapComponent.prototype.removeMap = /**
     * @return {?}
     */
    function () {
        this.map.remove();
    };
    AtlasMapComponent.decorators = [
        { type: Component, args: [{
                    selector: 'am-map',
                    template: "<div #mapWrapper class=\"atlas-map\"></div>\n\n<div id=\"popupWrapper\">\n  <div #popupsContainer>\n  </div>\n</div>\n\n\n\n\n",
                    styles: [".atlas-map{position:relative;width:100%;height:100%}"]
                },] },
    ];
    /** @nocollapse */
    AtlasMapComponent.ctorParameters = function () { return [
        { type: LoadMapService }
    ]; };
    AtlasMapComponent.propDecorators = {
        initialConfig: [{ type: Input }],
        _id: [{ type: Input }],
        onMapClick: [{ type: Output }],
        loaded: [{ type: Output }],
        popupsContainer: [{ type: ViewChild, args: ['popupsContainer', { read: ViewContainerRef },] }],
        mapWrapper: [{ type: ViewChild, args: ['mapWrapper', { read: ElementRef },] }],
        popupTemplate: [{ type: ContentChild, args: [AtlasPopupDirective, { read: TemplateRef },] }]
    };
    return AtlasMapComponent;
}());
export { AtlasMapComponent };
if (false) {
    /** @type {?} */
    AtlasMapComponent.prototype.initialConfig;
    /** @type {?} */
    AtlasMapComponent.prototype._id;
    /** @type {?} */
    AtlasMapComponent.prototype.onMapClick;
    /** @type {?} */
    AtlasMapComponent.prototype.loaded;
    /** @type {?} */
    AtlasMapComponent.prototype.popupsContainer;
    /** @type {?} */
    AtlasMapComponent.prototype.mapWrapper;
    /**
     * For create and control popup
     * To Inject into ng-template in parent
     * @type {?}
     */
    AtlasMapComponent.prototype.popupTemplate;
    /** @type {?} */
    AtlasMapComponent.prototype.popupView;
    /** @type {?} */
    AtlasMapComponent.prototype.popupAtlas;
    /** @type {?} */
    AtlasMapComponent.prototype.map;
    /** @type {?} */
    AtlasMapComponent.prototype.customPins;
    /** @type {?} */
    AtlasMapComponent.prototype.features;
    /** @type {?} */
    AtlasMapComponent.prototype.pointsArray;
    /** @type {?} */
    AtlasMapComponent.prototype.cssArray;
    /** @type {?} */
    AtlasMapComponent.prototype.mapService;
}

//# sourceMappingURL=data:application/json;base64,