/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Source() { }
/** @type {?} */
Source.prototype.type;
/** @type {?} */
Source.prototype.src;
/** @type {?} */
var sources = [
    {
        type: 'style',
        src: 'https://atlas.microsoft.com/sdk/css/atlas.min.css?api-version=1'
    },
    {
        type: 'script',
        src: 'https://atlas.microsoft.com/sdk/js/atlas.min.js?api-version=1'
    }
];
/**
 * @return {?}
 */
export function _window() {
    return window;
}
/** @typedef {?} */
var AssetType;
export { AssetType };
/**
 * @param {?} source
 * @param {?} type
 * @return {?}
 */
export function loadSingleAsset(source, type) {
    return new Promise(function (resolve, reject) {
        /** @type {?} */
        var createdElement;
        switch (type) {
            case 'script':
                createdElement = document.createElement('script');
                createdElement.src = source;
                break;
            case 'style':
                createdElement = document.createElement('link');
                createdElement.rel = 'stylesheet';
                createdElement.href = source;
                createdElement.type = 'text/css';
                break;
            default:
                reject('Wrong Type');
                break;
        }
        if (typeof (_window().atlas) !== 'undefined'
            && typeof (_window().atlas.Map) !== 'undefined') {
            resolve();
        }
        else {
            createdElement.onerror = reject;
            createdElement.onload = resolve;
            document.head.appendChild(createdElement);
        }
    });
}
/**
 * @return {?}
 */
export function azureMapLazyLoader() {
    return Promise.all(sources.map(function (source) { return loadSingleAsset(source.src, source.type); }));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmUtbWFwLWxhenktbG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFjYWlzb2Z0L2FuZ3VsYXItYXp1cmUtbWFwcy8iLCJzb3VyY2VzIjpbInNyYy9henVyZS1tYXAvdXRpbHMvYXp1cmUtbWFwLWxhenktbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFLQSxJQUFNLE9BQU8sR0FBYTtJQUN0QjtRQUNJLElBQUksRUFBRSxPQUFPO1FBQ2IsR0FBRyxFQUFFLGlFQUFpRTtLQUN6RTtJQUNEO1FBQ0ksSUFBSSxFQUFFLFFBQVE7UUFDZCxHQUFHLEVBQUUsK0RBQStEO0tBQ3ZFO0NBQ0osQ0FBQzs7OztBQUVGLE1BQU07SUFDRixPQUFPLE1BQU0sQ0FBQztDQUNqQjs7Ozs7Ozs7O0FBSUQsTUFBTSwwQkFBMEIsTUFBYyxFQUFFLElBQWU7SUFDM0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNOztRQUMvQixJQUFJLGNBQWMsQ0FBQztRQUNuQixRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssUUFBUTtnQkFDVCxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbEQsY0FBYyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7Z0JBQzVCLE1BQU07WUFDVixLQUFLLE9BQU87Z0JBQ1IsY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2hELGNBQWMsQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDO2dCQUNsQyxjQUFjLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDN0IsY0FBYyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7Z0JBQ2pDLE1BQU07WUFDVjtnQkFDSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3JCLE1BQU07U0FDYjtRQUNELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVc7ZUFDckMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxXQUFXLEVBQUU7WUFDakQsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0wsY0FBYyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDaEMsY0FBYyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7WUFDaEMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDM0M7S0FFSixDQUFDLENBQUM7Q0FDTjs7OztBQUVELE1BQU07SUFDRixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBeEMsQ0FBd0MsQ0FBQyxDQUFDLENBQUM7Q0FDdkYiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgU291cmNlIHtcbiAgdHlwZTogQXNzZXRUeXBlO1xuICBzcmM6IHN0cmluZztcbn1cblxuY29uc3Qgc291cmNlczogU291cmNlW10gPSBbXG4gICAge1xuICAgICAgICB0eXBlOiAnc3R5bGUnLFxuICAgICAgICBzcmM6ICdodHRwczovL2F0bGFzLm1pY3Jvc29mdC5jb20vc2RrL2Nzcy9hdGxhcy5taW4uY3NzP2FwaS12ZXJzaW9uPTEnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdzY3JpcHQnLFxuICAgICAgICBzcmM6ICdodHRwczovL2F0bGFzLm1pY3Jvc29mdC5jb20vc2RrL2pzL2F0bGFzLm1pbi5qcz9hcGktdmVyc2lvbj0xJ1xuICAgIH1cbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBfd2luZG93KCk6IGFueSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbn1cblxuZXhwb3J0IHR5cGUgQXNzZXRUeXBlID0gJ3NjcmlwdCcgfCAnc3R5bGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNpbmdsZUFzc2V0KHNvdXJjZTogc3RyaW5nLCB0eXBlOiBBc3NldFR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgY3JlYXRlZEVsZW1lbnQ7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2NyaXB0JzpcbiAgICAgICAgICAgICAgICBjcmVhdGVkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgIGNyZWF0ZWRFbGVtZW50LnNyYyA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3N0eWxlJzpcbiAgICAgICAgICAgICAgICBjcmVhdGVkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgICAgICAgICBjcmVhdGVkRWxlbWVudC5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgICAgICAgICAgICAgY3JlYXRlZEVsZW1lbnQuaHJlZiA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICBjcmVhdGVkRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdXcm9uZyBUeXBlJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAoX3dpbmRvdygpLmF0bGFzKSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICYmIHR5cGVvZiAoX3dpbmRvdygpLmF0bGFzLk1hcCkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3JlYXRlZEVsZW1lbnQub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICBjcmVhdGVkRWxlbWVudC5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoY3JlYXRlZEVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF6dXJlTWFwTGF6eUxvYWRlcigpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoc291cmNlcy5tYXAoc291cmNlID0+IGxvYWRTaW5nbGVBc3NldChzb3VyY2Uuc3JjLCBzb3VyY2UudHlwZSkpKTtcbn1cbiJdfQ==