/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { azureMapLazyLoader } from './azure-map-lazy-loader';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { fromPromise } from 'rxjs/internal-compatibility';
var LoadMapService = /** @class */ (function () {
    function LoadMapService() {
        this.isLoaded = false;
        this.isComponentLoaded = false;
        this.loadedSubject = new Subject();
        this.loadedComponenet = new BehaviorSubject(false);
    }
    /**
     * @return {?}
     */
    LoadMapService.prototype.load = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isLoaded) {
            return fromPromise(azureMapLazyLoader().then(function () {
                _this.isLoaded = true;
                return _this.isLoaded;
            }));
        }
        else {
            return of(true);
        }
    };
    /**
     * @return {?}
     */
    LoadMapService.prototype.observableComponent = /**
     * @return {?}
     */
    function () {
        return this.loadedSubject.asObservable();
    };
    LoadMapService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LoadMapService.ctorParameters = function () { return []; };
    return LoadMapService;
}());
export { LoadMapService };
if (false) {
    /** @type {?} */
    LoadMapService.prototype.isLoaded;
    /** @type {?} */
    LoadMapService.prototype.isComponentLoaded;
    /** @type {?} */
    LoadMapService.prototype.loadedSubject;
    /** @type {?} */
    LoadMapService.prototype.loadedComponenet;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1tYXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhY2Fpc29mdC9hbmd1bGFyLWF6dXJlLW1hcHMvIiwic291cmNlcyI6WyJzcmMvYXp1cmUtbWFwL3V0aWxzL2xvYWQtbWFwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGVBQWUsRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzlELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7SUFnQnREO3dCQVRrQixLQUFLO2lDQUVJLEtBQUs7NkJBSWhCLElBQUksT0FBTyxFQUFXO2dDQUNuQixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUM7S0FHNUM7Ozs7SUFHRCw2QkFBSTs7O0lBQUo7UUFBQSxpQkFTQztRQVJDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE9BQU8sV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDO2dCQUMzQyxLQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDckIsT0FBTyxLQUFJLENBQUMsUUFBUSxDQUFDO2FBQ3RCLENBQUMsQ0FBQyxDQUFDO1NBQ0w7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO0tBQ0Y7Ozs7SUFFRCw0Q0FBbUI7OztJQUFuQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUMxQzs7Z0JBOUJGLFVBQVU7Ozs7eUJBTlg7O1NBT2EsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2F6dXJlTWFwTGF6eUxvYWRlcn0gZnJvbSAnLi9henVyZS1tYXAtbGF6eS1sb2FkZXInO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZnJvbVByb21pc2V9IGZyb20gJ3J4anMvaW50ZXJuYWwtY29tcGF0aWJpbGl0eSc7XG5pbXBvcnQge2J9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL3JlbmRlcjMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9hZE1hcFNlcnZpY2Uge1xuXG5cbiAgcHVibGljIGlzTG9hZGVkID0gZmFsc2U7XG5cbiAgcHVibGljIGlzQ29tcG9uZW50TG9hZGVkID0gZmFsc2VcblxuXG5cbiAgbG9hZGVkU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIGxvYWRlZENvbXBvbmVuZXQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cblxuICBsb2FkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGlmICghdGhpcy5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGF6dXJlTWFwTGF6eUxvYWRlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNMb2FkZWQ7XG4gICAgICB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvZih0cnVlKTtcbiAgICB9XG4gIH1cblxuICBvYnNlcnZhYmxlQ29tcG9uZW50KCkge1xuICAgIHJldHVybiB0aGlzLmxvYWRlZFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cbn1cbiJdfQ==